// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

import * as utilities from "../utilities";

import {ObjectMeta} from "../meta/v1";

export namespace acme {
    export namespace v1 {
        export interface ChallengeSpecArgs {
            /**
             * The URL to the ACME Authorization resource that this challenge is a part of.
             */
            authorizationURL: pulumi.Input<string>;
            /**
             * dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
             */
            dnsName: pulumi.Input<string>;
            /**
             * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
             */
            issuerRef: pulumi.Input<inputs.acme.v1.ChallengeSpecIssuerrefArgs>;
            /**
             * The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.
             */
            key: pulumi.Input<string>;
            /**
             * Contains the domain solving configuration that should be used to solve this challenge resource.
             */
            solver: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverArgs>;
            /**
             * The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
             */
            token: pulumi.Input<string>;
            /**
             * The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
             */
            type: pulumi.Input<string>;
            /**
             * The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
             */
            url: pulumi.Input<string>;
            /**
             * wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
             */
            wildcard?: pulumi.Input<boolean>;
        }

        /**
         * References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
         */
        export interface ChallengeSpecIssuerrefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Contains the domain solving configuration that should be used to solve this challenge resource.
         */
        export interface ChallengeSpecSolverArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ChallengeSpecSolverDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AcmednsArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzurednsArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01ClouddnsArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AcmednsArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AcmednsAccountsecretrefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AcmednsAccountsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiAccesstokensecretrefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiClientsecretsecretrefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AkamaiClienttokensecretrefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiAccesstokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClientsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01AkamaiClienttokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01AzurednsArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzurednsClientsecretsecretrefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01AzurednsManagedidentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ChallengeSpecSolverDns01AzurednsClientsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ChallengeSpecSolverDns01AzurednsManagedidentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01ClouddnsArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01ClouddnsServiceaccountsecretrefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01ClouddnsServiceaccountsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareApikeysecretrefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01CloudflareApitokensecretrefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ChallengeSpecSolverDns01CloudflareApikeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ChallengeSpecSolverDns01CloudflareApitokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01DigitaloceanTokensecretrefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ChallengeSpecSolverDns01DigitaloceanTokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Rfc2136TsigsecretsecretrefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ChallengeSpecSolverDns01Rfc2136TsigsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53AccesskeyidsecretrefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverDns01Route53SecretaccesskeysecretrefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53AccesskeyidsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ChallengeSpecSolverDns01Route53SecretaccesskeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ChallengeSpecSolverDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ChallengeSpecSolverHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01GatewayhttprouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ChallengeSpecSolverHttp01GatewayhttprouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01GatewayhttprouteParentrefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ChallengeSpecSolverHttp01GatewayhttprouteParentrefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) 
             *  Support: Implementation-specific (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * challengeSpecSolverHttp01GatewayhttprouteParentrefsArgsProvideDefaults sets the appropriate defaults for ChallengeSpecSolverHttp01GatewayhttprouteParentrefsArgs
         */
        export function challengeSpecSolverHttp01GatewayhttprouteParentrefsArgsProvideDefaults(val: ChallengeSpecSolverHttp01GatewayhttprouteParentrefsArgs): ChallengeSpecSolverHttp01GatewayhttprouteParentrefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ChallengeSpecSolverHttp01IngressArgs {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressIngresstemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressIngresstemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressIngresstemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityArgs>;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecImagepullsecretsArgs>[]>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.acme.v1.ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecImagepullsecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ChallengeSpecSolverHttp01IngressPodtemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ChallengeSpecSolverSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface ChallengeStatusArgs {
            /**
             * presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
             */
            presented?: pulumi.Input<boolean>;
            /**
             * Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
             */
            processing?: pulumi.Input<boolean>;
            /**
             * Contains human readable information on why the Challenge is in the current state.
             */
            reason?: pulumi.Input<string>;
            /**
             * Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
             */
            state?: pulumi.Input<string>;
        }
    }
}

export namespace certmanager {
    export namespace v1 {
        /**
         * Desired state of the CertificateRequest resource.
         */
        export interface CertificateRequestSpecArgs {
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
             */
            duration?: pulumi.Input<string>;
            /**
             * Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            extra?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            groups?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            /**
             * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
             */
            issuerRef: pulumi.Input<inputs.certmanager.v1.CertificateRequestSpecIssuerrefArgs>;
            /**
             * The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
             */
            request: pulumi.Input<string>;
            /**
             * UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            uid?: pulumi.Input<string>;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
             */
            username?: pulumi.Input<string>;
        }

        /**
         * IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
         */
        export interface CertificateRequestSpecIssuerrefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the CertificateRequest. This is set and managed automatically.
         */
        export interface CertificateRequestStatusArgs {
            /**
             * The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
             */
            ca?: pulumi.Input<string>;
            /**
             * The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
             */
            certificate?: pulumi.Input<string>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateRequestStatusConditionsArgs>[]>;
            /**
             * FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
             */
            failureTime?: pulumi.Input<string>;
        }

        /**
         * CertificateRequestCondition contains condition information for a CertificateRequest.
         */
        export interface CertificateRequestStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the Certificate resource.
         */
        export interface CertificateSpecArgs {
            /**
             * AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.
             */
            additionalOutputFormats?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateSpecAdditionaloutputformatsArgs>[]>;
            /**
             * CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
             */
            commonName?: pulumi.Input<string>;
            /**
             * DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            duration?: pulumi.Input<string>;
            /**
             * EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
             */
            emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
             */
            encodeUsagesInRequest?: pulumi.Input<boolean>;
            /**
             * IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
             */
            ipAddresses?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
             */
            isCA?: pulumi.Input<boolean>;
            /**
             * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
             */
            issuerRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecIssuerrefArgs>;
            /**
             * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
             */
            keystores?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresArgs>;
            /**
             * LiteralSubject is an LDAP formatted string that represents the [X.509 Subject field](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6). Use this *instead* of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook.
             */
            literalSubject?: pulumi.Input<string>;
            /**
             * Options to control private keys used for the Certificate.
             */
            privateKey?: pulumi.Input<inputs.certmanager.v1.CertificateSpecPrivatekeyArgs>;
            /**
             * How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
             */
            renewBefore?: pulumi.Input<string>;
            /**
             * revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
             */
            revisionHistoryLimit?: pulumi.Input<number>;
            /**
             * SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
             */
            secretName: pulumi.Input<string>;
            /**
             * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
             */
            secretTemplate?: pulumi.Input<inputs.certmanager.v1.CertificateSpecSecrettemplateArgs>;
            /**
             * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
             */
            subject?: pulumi.Input<inputs.certmanager.v1.CertificateSpecSubjectArgs>;
            /**
             * URIs is a list of URI subjectAltNames to be set on the Certificate.
             */
            uris?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
             */
            usages?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
         */
        export interface CertificateSpecAdditionaloutputformatsArgs {
            /**
             * Type is the name of the format type that should be written to the Certificate's target Secret.
             */
            type: pulumi.Input<string>;
        }

        /**
         * IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
         */
        export interface CertificateSpecIssuerrefArgs {
            /**
             * Group of the resource being referred to.
             */
            group?: pulumi.Input<string>;
            /**
             * Kind of the resource being referred to.
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresArgs {
            /**
             * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
             */
            jks?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresJksArgs>;
            /**
             * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
             */
            pkcs12?: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresPkcs12Args>;
        }

        /**
         * JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresJksArgs {
            /**
             * Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: pulumi.Input<boolean>;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
             */
            passwordSecretRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresJksPasswordsecretrefArgs>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
         */
        export interface CertificateSpecKeystoresJksPasswordsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
         */
        export interface CertificateSpecKeystoresPkcs12Args {
            /**
             * Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
             */
            create: pulumi.Input<boolean>;
            /**
             * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
             */
            passwordSecretRef: pulumi.Input<inputs.certmanager.v1.CertificateSpecKeystoresPkcs12PasswordsecretrefArgs>;
        }

        /**
         * PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
         */
        export interface CertificateSpecKeystoresPkcs12PasswordsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Options to control private keys used for the Certificate.
         */
        export interface CertificateSpecPrivatekeyArgs {
            /**
             * Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
             */
            algorithm?: pulumi.Input<string>;
            /**
             * The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
             */
            encoding?: pulumi.Input<string>;
            /**
             * RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
             */
            rotationPolicy?: pulumi.Input<string>;
            /**
             * Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
             */
            size?: pulumi.Input<number>;
        }

        /**
         * SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
         */
        export interface CertificateSpecSecrettemplateArgs {
            /**
             * Annotations is a key value map to be copied to the target Kubernetes Secret.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels is a key value map to be copied to the target Kubernetes Secret.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
         */
        export interface CertificateSpecSubjectArgs {
            /**
             * Countries to be used on the Certificate.
             */
            countries?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Cities to be used on the Certificate.
             */
            localities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizational Units to be used on the Certificate.
             */
            organizationalUnits?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Organizations to be used on the Certificate.
             */
            organizations?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Postal codes to be used on the Certificate.
             */
            postalCodes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * State/Provinces to be used on the Certificate.
             */
            provinces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Serial number to be used on the Certificate.
             */
            serialNumber?: pulumi.Input<string>;
            /**
             * Street addresses to be used on the Certificate.
             */
            streetAddresses?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status of the Certificate. This is set and managed automatically.
         */
        export interface CertificateStatusArgs {
            /**
             * List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.CertificateStatusConditionsArgs>[]>;
            /**
             * The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
             */
            failedIssuanceAttempts?: pulumi.Input<number>;
            /**
             * LastFailureTime is set only if the lastest issuance for this Certificate failed and contains the time of the failure. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1). If the latest issuance has succeeded this field will be unset.
             */
            lastFailureTime?: pulumi.Input<string>;
            /**
             * The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
             */
            nextPrivateKeySecretName?: pulumi.Input<string>;
            /**
             * The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
             */
            notAfter?: pulumi.Input<string>;
            /**
             * The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
             */
            notBefore?: pulumi.Input<string>;
            /**
             * RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
             */
            renewalTime?: pulumi.Input<string>;
            /**
             * The current 'revision' of the certificate as issued. 
             *  When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
             *  Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
             *  Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
             */
            revision?: pulumi.Input<number>;
        }

        /**
         * CertificateCondition contains condition information for an Certificate.
         */
        export interface CertificateStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`, `Issuing`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the ClusterIssuer resource.
         */
        export interface ClusterIssuerSpecArgs {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeArgs>;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecCaArgs>;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecSelfsignedArgs>;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultArgs>;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiArgs>;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface ClusterIssuerSpecAcmeArgs {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: pulumi.Input<boolean>;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: pulumi.Input<string>;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: pulumi.Input<boolean>;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeExternalaccountbindingArgs>;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: pulumi.Input<string>;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmePrivatekeysecretrefArgs>;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: pulumi.Input<string>;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: pulumi.Input<boolean>;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversArgs>[]>;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface ClusterIssuerSpecAcmeExternalaccountbindingArgs {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: pulumi.Input<string>;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: pulumi.Input<string>;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeExternalaccountbindingKeysecretrefArgs>;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface ClusterIssuerSpecAcmeExternalaccountbindingKeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface ClusterIssuerSpecAcmePrivatekeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface ClusterIssuerSpecAcmeSolversArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmednsArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzurednsArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01ClouddnsArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmednsArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AcmednsAccountsecretrefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AcmednsAccountsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiAccesstokensecretrefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClientsecretsecretrefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AkamaiClienttokensecretrefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiAccesstokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClientsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AkamaiClienttokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzurednsArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzurednsClientsecretsecretrefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01AzurednsManagedidentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzurednsClientsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface ClusterIssuerSpecAcmeSolversDns01AzurednsManagedidentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01ClouddnsArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretrefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApikeysecretrefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01CloudflareApitokensecretrefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApikeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01CloudflareApitokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokensecretrefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigsecretsecretrefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53AccesskeyidsecretrefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversDns01Route53SecretaccesskeysecretrefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53AccesskeyidsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface ClusterIssuerSpecAcmeSolversDns01Route53SecretaccesskeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface ClusterIssuerSpecAcmeSolversDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) 
             *  Support: Implementation-specific (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * clusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgsProvideDefaults sets the appropriate defaults for ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs
         */
        export function clusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgsProvideDefaults(val: ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs): ClusterIssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressArgs {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityArgs>;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecImagepullsecretsArgs>[]>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecImagepullsecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface ClusterIssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface ClusterIssuerSpecAcmeSolversSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface ClusterIssuerSpecCaArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface ClusterIssuerSpecSelfsignedArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface ClusterIssuerSpecVaultArgs {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthArgs>;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultCabundlesecretrefArgs>;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: pulumi.Input<string>;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: pulumi.Input<string>;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthArgs {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthApproleArgs>;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesArgs>;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthTokensecretrefArgs>;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface ClusterIssuerSpecVaultAuthApproleArgs {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: pulumi.Input<string>;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: pulumi.Input<string>;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthApproleSecretrefArgs>;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface ClusterIssuerSpecVaultAuthApproleSecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesArgs {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: pulumi.Input<string>;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: pulumi.Input<string>;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesSecretrefArgs>;
            /**
             * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
             */
            serviceAccountRef?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVaultAuthKubernetesServiceaccountrefArgs>;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesSecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
         */
        export interface ClusterIssuerSpecVaultAuthKubernetesServiceaccountrefArgs {
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: pulumi.Input<string>;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface ClusterIssuerSpecVaultAuthTokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface ClusterIssuerSpecVaultCabundlesecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface ClusterIssuerSpecVenafiArgs {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiCloudArgs>;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiTppArgs>;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: pulumi.Input<string>;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiCloudArgs {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiCloudApitokensecretrefArgs>;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: pulumi.Input<string>;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface ClusterIssuerSpecVenafiCloudApitokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface ClusterIssuerSpecVenafiTppArgs {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: pulumi.Input<inputs.certmanager.v1.ClusterIssuerSpecVenafiTppCredentialsrefArgs>;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: pulumi.Input<string>;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface ClusterIssuerSpecVenafiTppCredentialsrefArgs {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the ClusterIssuer. This is set and managed automatically.
         */
        export interface ClusterIssuerStatusArgs {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.ClusterIssuerStatusAcmeArgs>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.ClusterIssuerStatusConditionsArgs>[]>;
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface ClusterIssuerStatusAcmeArgs {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
             */
            lastPrivateKeyHash?: pulumi.Input<string>;
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: pulumi.Input<string>;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface ClusterIssuerStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: pulumi.Input<string>;
        }

        /**
         * Desired state of the Issuer resource.
         */
        export interface IssuerSpecArgs {
            /**
             * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeArgs>;
            /**
             * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
             */
            ca?: pulumi.Input<inputs.certmanager.v1.IssuerSpecCaArgs>;
            /**
             * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
             */
            selfSigned?: pulumi.Input<inputs.certmanager.v1.IssuerSpecSelfsignedArgs>;
            /**
             * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
             */
            vault?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultArgs>;
            /**
             * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
             */
            venafi?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiArgs>;
        }

        /**
         * ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
         */
        export interface IssuerSpecAcmeArgs {
            /**
             * Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
             */
            disableAccountKeyGeneration?: pulumi.Input<boolean>;
            /**
             * Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
             */
            email?: pulumi.Input<string>;
            /**
             * Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
             */
            enableDurationFeature?: pulumi.Input<boolean>;
            /**
             * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
             */
            externalAccountBinding?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeExternalaccountbindingArgs>;
            /**
             * PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
             */
            preferredChain?: pulumi.Input<string>;
            /**
             * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
             */
            privateKeySecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmePrivatekeysecretrefArgs>;
            /**
             * Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
             */
            server: pulumi.Input<string>;
            /**
             * INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.
             */
            skipTLSVerify?: pulumi.Input<boolean>;
            /**
             * Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
             */
            solvers?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversArgs>[]>;
        }

        /**
         * ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
         */
        export interface IssuerSpecAcmeExternalaccountbindingArgs {
            /**
             * Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.
             */
            keyAlgorithm?: pulumi.Input<string>;
            /**
             * keyID is the ID of the CA key that the External Account is bound to.
             */
            keyID: pulumi.Input<string>;
            /**
             * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
             */
            keySecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeExternalaccountbindingKeysecretrefArgs>;
        }

        /**
         * keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
         */
        export interface IssuerSpecAcmeExternalaccountbindingKeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
         */
        export interface IssuerSpecAcmePrivatekeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
         */
        export interface IssuerSpecAcmeSolversArgs {
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
             */
            dns01?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Args>;
            /**
             * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
             */
            http01?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01Args>;
            /**
             * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
             */
            selector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversSelectorArgs>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
         */
        export interface IssuerSpecAcmeSolversDns01Args {
            /**
             * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
             */
            acmeDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmednsArgs>;
            /**
             * Use the Akamai DNS zone management API to manage DNS01 challenge records.
             */
            akamai?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiArgs>;
            /**
             * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
             */
            azureDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzurednsArgs>;
            /**
             * Use the Google Cloud DNS API to manage DNS01 challenge records.
             */
            cloudDNS?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01ClouddnsArgs>;
            /**
             * Use the Cloudflare API to manage DNS01 challenge records.
             */
            cloudflare?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareArgs>;
            /**
             * CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
             */
            cnameStrategy?: pulumi.Input<string>;
            /**
             * Use the DigitalOcean DNS API to manage DNS01 challenge records.
             */
            digitalocean?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanArgs>;
            /**
             * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
             */
            rfc2136?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136Args>;
            /**
             * Use the AWS Route53 API to manage DNS01 challenge records.
             */
            route53?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53Args>;
            /**
             * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
             */
            webhook?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01WebhookArgs>;
        }

        /**
         * Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AcmednsArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accountSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AcmednsAccountsecretrefArgs>;
            host: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AcmednsAccountsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Akamai DNS zone management API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            accessTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiAccesstokensecretrefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientSecretSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClientsecretsecretrefArgs>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            clientTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AkamaiClienttokensecretrefArgs>;
            serviceConsumerDomain: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiAccesstokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClientsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01AkamaiClienttokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Microsoft Azure DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01AzurednsArgs {
            /**
             * if both this and ClientSecret are left unset MSI will be used
             */
            clientID?: pulumi.Input<string>;
            /**
             * if both this and ClientID are left unset MSI will be used
             */
            clientSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzurednsClientsecretsecretrefArgs>;
            /**
             * name of the Azure environment (default AzurePublicCloud)
             */
            environment?: pulumi.Input<string>;
            /**
             * name of the DNS zone that should be used
             */
            hostedZoneName?: pulumi.Input<string>;
            /**
             * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
             */
            managedIdentity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01AzurednsManagedidentityArgs>;
            /**
             * resource group the DNS zone is located in
             */
            resourceGroupName: pulumi.Input<string>;
            /**
             * ID of the Azure subscription
             */
            subscriptionID: pulumi.Input<string>;
            /**
             * when specifying ClientID and ClientSecret then this field is also needed
             */
            tenantID?: pulumi.Input<string>;
        }

        /**
         * if both this and ClientID are left unset MSI will be used
         */
        export interface IssuerSpecAcmeSolversDns01AzurednsClientsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
         */
        export interface IssuerSpecAcmeSolversDns01AzurednsManagedidentityArgs {
            /**
             * client ID of the managed identity, can not be used at the same time as resourceID
             */
            clientID?: pulumi.Input<string>;
            /**
             * resource ID of the managed identity, can not be used at the same time as clientID
             */
            resourceID?: pulumi.Input<string>;
        }

        /**
         * Use the Google Cloud DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01ClouddnsArgs {
            /**
             * HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
             */
            hostedZoneName?: pulumi.Input<string>;
            project: pulumi.Input<string>;
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            serviceAccountSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretrefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01ClouddnsServiceaccountsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the Cloudflare API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareArgs {
            /**
             * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
             */
            apiKeySecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApikeysecretrefArgs>;
            /**
             * API token used to authenticate with Cloudflare.
             */
            apiTokenSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01CloudflareApitokensecretrefArgs>;
            /**
             * Email of the account, only required when using API key based authentication.
             */
            email?: pulumi.Input<string>;
        }

        /**
         * API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApikeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * API token used to authenticate with Cloudflare.
         */
        export interface IssuerSpecAcmeSolversDns01CloudflareApitokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the DigitalOcean DNS API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanArgs {
            /**
             * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
             */
            tokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01DigitaloceanTokensecretrefArgs>;
        }

        /**
         * A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
         */
        export interface IssuerSpecAcmeSolversDns01DigitaloceanTokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136Args {
            /**
             * The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
             */
            nameserver: pulumi.Input<string>;
            /**
             * The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
             */
            tsigAlgorithm?: pulumi.Input<string>;
            /**
             * The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
             */
            tsigKeyName?: pulumi.Input<string>;
            /**
             * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
             */
            tsigSecretSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Rfc2136TsigsecretsecretrefArgs>;
        }

        /**
         * The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
         */
        export interface IssuerSpecAcmeSolversDns01Rfc2136TsigsecretsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Use the AWS Route53 API to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01Route53Args {
            /**
             * The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyID?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            accessKeyIDSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53AccesskeyidsecretrefArgs>;
            /**
             * If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
             */
            hostedZoneID?: pulumi.Input<string>;
            /**
             * Always set the region when using AccessKeyID and SecretAccessKey
             */
            region: pulumi.Input<string>;
            /**
             * Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
             */
            role?: pulumi.Input<string>;
            /**
             * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
             */
            secretAccessKeySecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversDns01Route53SecretaccesskeysecretrefArgs>;
        }

        /**
         * The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53AccesskeyidsecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
         */
        export interface IssuerSpecAcmeSolversDns01Route53SecretaccesskeysecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
         */
        export interface IssuerSpecAcmeSolversDns01WebhookArgs {
            /**
             * Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
             */
            config?: pulumi.Input<{[key: string]: any}>;
            /**
             * The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
             */
            groupName: pulumi.Input<string>;
            /**
             * The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
             */
            solverName: pulumi.Input<string>;
        }

        /**
         * Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
         */
        export interface IssuerSpecAcmeSolversHttp01Args {
            /**
             * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
             */
            gatewayHTTPRoute?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayhttprouteArgs>;
            /**
             * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
             */
            ingress?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressArgs>;
        }

        /**
         * The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayhttprouteArgs {
            /**
             * Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways
             */
            parentRefs?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs>[]>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with "Core" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. 
         *  The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.
         */
        export interface IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs {
            /**
             * Group is the group of the referent. When unspecified, "gateway.networking.k8s.io" is inferred. To set the core API group (such as for a "Service" kind referent), Group must be explicitly set to "" (empty string). 
             *  Support: Core
             */
            group?: pulumi.Input<string>;
            /**
             * Kind is kind of the referent. 
             *  Support: Core (Gateway) 
             *  Support: Implementation-specific (Other Resources)
             */
            kind?: pulumi.Input<string>;
            /**
             * Name is the name of the referent. 
             *  Support: Core
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. 
             *  Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. 
             *  Support: Core
             */
            namespace?: pulumi.Input<string>;
            /**
             * Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. 
             *  When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. 
             *  For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Extended 
             *  <gateway:experimental>
             */
            port?: pulumi.Input<number>;
            /**
             * SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: 
             *  * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. 
             *  Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. 
             *  When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. 
             *  Support: Core
             */
            sectionName?: pulumi.Input<string>;
        }
        /**
         * issuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgsProvideDefaults sets the appropriate defaults for IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs
         */
        export function issuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgsProvideDefaults(val: IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs): IssuerSpecAcmeSolversHttp01GatewayhttprouteParentrefsArgs {
            return {
                ...val,
                group: (val.group) ?? "gateway.networking.k8s.io",
                kind: (val.kind) ?? "Gateway",
            };
        }

        /**
         * The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressArgs {
            /**
             * This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            class?: pulumi.Input<string>;
            /**
             * This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            ingressClassName?: pulumi.Input<string>;
            /**
             * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
             */
            ingressTemplate?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngresstemplateArgs>;
            /**
             * The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
             */
            name?: pulumi.Input<string>;
            /**
             * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
             */
            podTemplate?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateArgs>;
            /**
             * Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
             */
            serviceType?: pulumi.Input<string>;
        }

        /**
         * Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngresstemplateArgs {
            /**
             * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadataArgs>;
        }

        /**
         * ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressIngresstemplateMetadataArgs {
            /**
             * Annotations that should be added to the created ACME HTTP01 solver ingress.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver ingress.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateArgs {
            /**
             * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
             */
            metadata?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateMetadataArgs>;
            /**
             * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
             */
            spec?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecArgs>;
        }

        /**
         * ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateMetadataArgs {
            /**
             * Annotations that should be added to the create ACME HTTP01 solver pods.
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Labels that should be added to the created ACME HTTP01 solver pods.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecArgs {
            /**
             * If specified, the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityArgs>;
            /**
             * If specified, the pod's imagePullSecrets
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecImagepullsecretsArgs>[]>;
            /**
             * NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If specified, the pod's priorityClassName.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * If specified, the pod's service account
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerationsArgs>[]>;
        }

        /**
         * If specified, the pod's scheduling constraints
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecImagepullsecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface IssuerSpecAcmeSolversHttp01IngressPodtemplateSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
         */
        export interface IssuerSpecAcmeSolversSelectorArgs {
            /**
             * List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsNames?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
             */
            dnsZones?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
         */
        export interface IssuerSpecCaArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
             */
            ocspServers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to sign Certificates issued by this Issuer.
             */
            secretName: pulumi.Input<string>;
        }

        /**
         * SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
         */
        export interface IssuerSpecSelfsignedArgs {
            /**
             * The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
             */
            crlDistributionPoints?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
         */
        export interface IssuerSpecVaultArgs {
            /**
             * Auth configures how cert-manager authenticates with the Vault server.
             */
            auth: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthArgs>;
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
             */
            caBundleSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultCabundlesecretrefArgs>;
            /**
             * Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
             */
            path: pulumi.Input<string>;
            /**
             * Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
             */
            server: pulumi.Input<string>;
        }

        /**
         * Auth configures how cert-manager authenticates with the Vault server.
         */
        export interface IssuerSpecVaultAuthArgs {
            /**
             * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
             */
            appRole?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthApproleArgs>;
            /**
             * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
             */
            kubernetes?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesArgs>;
            /**
             * TokenSecretRef authenticates with Vault by presenting a token.
             */
            tokenSecretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthTokensecretrefArgs>;
        }

        /**
         * AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
         */
        export interface IssuerSpecVaultAuthApproleArgs {
            /**
             * Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
             */
            path: pulumi.Input<string>;
            /**
             * RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
             */
            roleId: pulumi.Input<string>;
            /**
             * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
             */
            secretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthApproleSecretrefArgs>;
        }

        /**
         * Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
         */
        export interface IssuerSpecVaultAuthApproleSecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
         */
        export interface IssuerSpecVaultAuthKubernetesArgs {
            /**
             * The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
             */
            mountPath?: pulumi.Input<string>;
            /**
             * A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
             */
            role: pulumi.Input<string>;
            /**
             * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
             */
            secretRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesSecretrefArgs>;
            /**
             * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
             */
            serviceAccountRef?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVaultAuthKubernetesServiceaccountrefArgs>;
        }

        /**
         * The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
         */
        export interface IssuerSpecVaultAuthKubernetesSecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
         */
        export interface IssuerSpecVaultAuthKubernetesServiceaccountrefArgs {
            /**
             * Name of the ServiceAccount used to request a token.
             */
            name: pulumi.Input<string>;
        }

        /**
         * TokenSecretRef authenticates with Vault by presenting a token.
         */
        export interface IssuerSpecVaultAuthTokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
         */
        export interface IssuerSpecVaultCabundlesecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
         */
        export interface IssuerSpecVenafiArgs {
            /**
             * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
             */
            cloud?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiCloudArgs>;
            /**
             * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
             */
            tpp?: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiTppArgs>;
            /**
             * Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
             */
            zone: pulumi.Input<string>;
        }

        /**
         * Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiCloudArgs {
            /**
             * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
             */
            apiTokenSecretRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiCloudApitokensecretrefArgs>;
            /**
             * URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
             */
            url?: pulumi.Input<string>;
        }

        /**
         * APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
         */
        export interface IssuerSpecVenafiCloudApitokensecretrefArgs {
            /**
             * The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
             */
            key?: pulumi.Input<string>;
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
         */
        export interface IssuerSpecVenafiTppArgs {
            /**
             * Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
             */
            caBundle?: pulumi.Input<string>;
            /**
             * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
             */
            credentialsRef: pulumi.Input<inputs.certmanager.v1.IssuerSpecVenafiTppCredentialsrefArgs>;
            /**
             * URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
             */
            url: pulumi.Input<string>;
        }

        /**
         * CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
         */
        export interface IssuerSpecVenafiTppCredentialsrefArgs {
            /**
             * Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
        }

        /**
         * Status of the Issuer. This is set and managed automatically.
         */
        export interface IssuerStatusArgs {
            /**
             * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
             */
            acme?: pulumi.Input<inputs.certmanager.v1.IssuerStatusAcmeArgs>;
            /**
             * List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.certmanager.v1.IssuerStatusConditionsArgs>[]>;
        }

        /**
         * ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
         */
        export interface IssuerStatusAcmeArgs {
            /**
             * LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
             */
            lastPrivateKeyHash?: pulumi.Input<string>;
            /**
             * LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
             */
            lastRegisteredEmail?: pulumi.Input<string>;
            /**
             * URI is the unique account identifier, which can also be used to retrieve account details from the CA
             */
            uri?: pulumi.Input<string>;
        }

        /**
         * IssuerCondition contains condition information for an Issuer.
         */
        export interface IssuerStatusConditionsArgs {
            /**
             * LastTransitionTime is the timestamp corresponding to the last status change of this condition.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * Message is a human readable description of the details of the last transition, complementing reason.
             */
            message?: pulumi.Input<string>;
            /**
             * If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
             */
            observedGeneration?: pulumi.Input<number>;
            /**
             * Reason is a brief machine readable explanation for the condition's last transition.
             */
            reason?: pulumi.Input<string>;
            /**
             * Status of the condition, one of (`True`, `False`, `Unknown`).
             */
            status: pulumi.Input<string>;
            /**
             * Type of the condition, known values are (`Ready`).
             */
            type: pulumi.Input<string>;
        }
    }
}

export namespace clickhouse {
    export namespace v1 {
        /**
         * Specification of the desired behavior of one or more ClickHouse clusters
         * More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
         */
        export interface ClickHouseInstallationSpecArgs {
            /**
             * allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
             */
            configuration?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationArgs>;
            /**
             * define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
             * More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
             */
            defaults?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecDefaultsArgs>;
            /**
             * custom domain suffix which will add to end of `Service` or `Pod` name, use it when you use custom cluster domain in your Kubernetes cluster
             */
            namespaceDomainPattern?: pulumi.Input<string>;
            /**
             * optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
             */
            reconciling?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecReconcilingArgs>;
            /**
             * This is a 'soft restart' button. When set to 'RollingUpdate' operator will restart ClickHouse pods in a graceful way. Remove it after the use in order to avoid unneeded restarts
             */
            restart?: pulumi.Input<string>;
            /**
             * Allow stop all ClickHouse clusters described in current chi.
             * Stop mechanism works as follows:
             *  - When `stop` is `1` then setup `Replicas: 0` in each related to current `chi` StatefulSet resource, all `Pods` and `Service` resources will desctroy, but PVCs still live
             *  - When `stop` is `0` then `Pods` will created again and will attach retained PVCs and `Service` also will created again
             */
            stop?: pulumi.Input<string>;
            /**
             * Allows to define custom taskID for named update operation and watch status of this update execution in .status.taskIDs field.
             * By default every update of chi manifest will generate random taskID
             */
            taskID?: pulumi.Input<string>;
            /**
             * allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesArgs>;
            /**
             * optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation
             */
            templating?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatingArgs>;
            /**
             * allows troubleshoot Pods during CrashLoopBack state, when you apply wrong configuration, `clickhouse-server` wouldn't startup
             */
            troubleshoot?: pulumi.Input<string>;
            /**
             * list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `Chi` manifest during render Kubernetes resources to create related ClickHouse clusters
             */
            useTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecUsetemplatesArgs>[]>;
        }

        /**
         * allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
         */
        export interface ClickHouseInstallationSpecConfigurationArgs {
            /**
             * describes ClickHouse clusters layout and allows change settings on cluster-level, shard-level and replica-level
             * every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
             * all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
             * Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
             * If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
             */
            clusters?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersArgs>[]>;
            /**
             * allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * every key in this object is the file name
             * every value in this object is the file content
             * you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
             * each key could contains prefix like USERS, COMMON, HOST or config.d, users.d, cond.d, wrong prefixes will ignored, subfolders also will ignored
             * More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
             * you can configure any aspect of settings profile
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
             */
            profiles?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
             * you can configure any aspect of resource quotas
             * More details: https://clickhouse.tech/docs/en/operations/quotas/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
             */
            quotas?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
             * you can configure password hashed, authorization restrictions, database level security row filters etc.
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
             */
            users?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
             * `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
             * currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
             * More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
             */
            zookeeper?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationZookeeperArgs>;
        }

        export interface ClickHouseInstallationSpecConfigurationClustersArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * describe current cluster layout, how much shards in cluster, how much replica in shard
             * allows override settings on each shard and replica separatelly
             */
            layout?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutArgs>;
            /**
             * cluster name, used to identify set of ClickHouse servers and wide used during generate names of related Kubernetes resources
             */
            name?: pulumi.Input<string>;
            /**
             * describes how schema is propagated within replicas and shards
             */
            schemaPolicy?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersSchemapolicyArgs>;
            /**
             * optional, shared secret value to secure cluster communications
             */
            secret?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersSecretArgs>;
            /**
             * optional, open secure ports for cluster
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
             * override top-level `chi.spec.configuration.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
             * override top-level `chi.spec.configuration.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersTemplatesArgs>;
            /**
             * optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
             * override top-level `chi.spec.configuration.zookeeper` settings
             */
            zookeeper?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersZookeeperArgs>;
        }

        /**
         * describe current cluster layout, how much shards in cluster, how much replica in shard
         * allows override settings on each shard and replica separatelly
         */
        export interface ClickHouseInstallationSpecConfigurationClustersLayoutArgs {
            /**
             * optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
             */
            replicas?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs>[]>;
            /**
             * how much replicas in each shards for current ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance, every shard contains 1 replica by default
             */
            replicasCount?: pulumi.Input<number>;
            /**
             * optional, allows override top-level `chi.spec.configuration`, cluster-level `chi.spec.configuration.clusters` settings for each shard separately, use it only if you fully understand what you do
             */
            shards?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs>[]>;
            /**
             * how much shards for current ClickHouse cluster will run in Kubernetes, each shard contains shared-nothing part of data and contains set of replicas, cluster contains 1 shard by default
             */
            shardsCount?: pulumi.Input<number>;
            /**
             * DEPRECATED - to be removed soon
             */
            type?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationSpecConfigurationClustersLayoutReplicasArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, by default replica name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
             */
            shards?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs>[]>;
            /**
             * optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
             */
            shardsCount?: pulumi.Input<number>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
             * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs>;
        }

        export interface ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
             * allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
             */
            httpPort?: pulumi.Input<number>;
            httpsPort?: pulumi.Input<number>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
             * allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
             */
            interserverHTTPPort?: pulumi.Input<number>;
            /**
             * optional, by default shard name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, open secure ports
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
             * allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
             */
            tcpPort?: pulumi.Input<number>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
             * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs>;
            tlsPort?: pulumi.Input<number>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
         * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
         */
        export interface ClickHouseInstallationSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
         * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
         */
        export interface ClickHouseInstallationSpecConfigurationClustersLayoutReplicasTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationSpecConfigurationClustersLayoutShardsArgs {
            /**
             * DEPRECATED - to be removed soon
             */
            definitionType?: pulumi.Input<string>;
            /**
             * optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
             * allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
             * will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
             * More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
             */
            internalReplication?: pulumi.Input<string>;
            /**
             * optional, by default shard name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
             */
            replicas?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs>[]>;
            /**
             * optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
             * shard contains 1 replica by default
             * override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
             */
            replicasCount?: pulumi.Input<number>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
             * override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
             * override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs>;
            /**
             * optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
             * will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
             * More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
             */
            weight?: pulumi.Input<number>;
        }

        export interface ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasArgs {
            /**
             * optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
             * allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
             */
            httpPort?: pulumi.Input<number>;
            httpsPort?: pulumi.Input<number>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
             * allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
             */
            interserverHTTPPort?: pulumi.Input<number>;
            /**
             * optional, by default replica name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, open secure ports
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
             * allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
             */
            tcpPort?: pulumi.Input<number>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
             * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs>;
            tlsPort?: pulumi.Input<number>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
         * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
         */
        export interface ClickHouseInstallationSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
         * override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
         */
        export interface ClickHouseInstallationSpecConfigurationClustersLayoutShardsTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * describes how schema is propagated within replicas and shards
         */
        export interface ClickHouseInstallationSpecConfigurationClustersSchemapolicyArgs {
            /**
             * how schema is propagated within a replica
             */
            replica?: pulumi.Input<string>;
            /**
             * how schema is propagated between shards
             */
            shard?: pulumi.Input<string>;
        }

        /**
         * optional, shared secret value to secure cluster communications
         */
        export interface ClickHouseInstallationSpecConfigurationClustersSecretArgs {
            /**
             * Auto-generate shared secret value to secure cluster communications
             */
            auto?: pulumi.Input<string>;
            /**
             * Cluster shared secret value in plain text
             */
            value?: pulumi.Input<string>;
            /**
             * Cluster shared secret source
             */
            valueFrom?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersSecretValuefromArgs>;
        }

        /**
         * Cluster shared secret source
         */
        export interface ClickHouseInstallationSpecConfigurationClustersSecretValuefromArgs {
            /**
             * Selects a key of a secret in the clickhouse installation namespace.
             * Should not be used if value is not empty.
             */
            secretKeyRef?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersSecretValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a secret in the clickhouse installation namespace.
         * Should not be used if value is not empty.
         */
        export interface ClickHouseInstallationSpecConfigurationClustersSecretValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from. Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info:
             * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
         * override top-level `chi.spec.configuration.templates`
         */
        export interface ClickHouseInstallationSpecConfigurationClustersTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
         * override top-level `chi.spec.configuration.zookeeper` settings
         */
        export interface ClickHouseInstallationSpecConfigurationClustersZookeeperArgs {
            /**
             * optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
             */
            identity?: pulumi.Input<string>;
            /**
             * describe every available zookeeper cluster node for interaction
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs>[]>;
            /**
             * one operation timeout during Zookeeper transactions
             */
            operation_timeout_ms?: pulumi.Input<number>;
            /**
             * optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
             */
            root?: pulumi.Input<string>;
            /**
             * session timeout during connect to Zookeeper
             */
            session_timeout_ms?: pulumi.Input<number>;
        }

        export interface ClickHouseInstallationSpecConfigurationClustersZookeeperNodesArgs {
            /**
             * dns name or ip address for Zookeeper node
             */
            host?: pulumi.Input<string>;
            /**
             * TCP port which used to connect to Zookeeper node
             */
            port?: pulumi.Input<number>;
            /**
             * if a secure connection to Zookeeper is required
             */
            secure?: pulumi.Input<string>;
        }

        /**
         * allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
         * `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
         * currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
         * More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
         */
        export interface ClickHouseInstallationSpecConfigurationZookeeperArgs {
            /**
             * optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
             */
            identity?: pulumi.Input<string>;
            /**
             * describe every available zookeeper cluster node for interaction
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecConfigurationZookeeperNodesArgs>[]>;
            /**
             * one operation timeout during Zookeeper transactions
             */
            operation_timeout_ms?: pulumi.Input<number>;
            /**
             * optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
             */
            root?: pulumi.Input<string>;
            /**
             * session timeout during connect to Zookeeper
             */
            session_timeout_ms?: pulumi.Input<number>;
        }

        export interface ClickHouseInstallationSpecConfigurationZookeeperNodesArgs {
            /**
             * dns name or ip address for Zookeeper node
             */
            host?: pulumi.Input<string>;
            /**
             * TCP port which used to connect to Zookeeper node
             */
            port?: pulumi.Input<number>;
            /**
             * if a secure connection to Zookeeper is required
             */
            secure?: pulumi.Input<string>;
        }

        /**
         * define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
         * More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
         */
        export interface ClickHouseInstallationSpecDefaultsArgs {
            /**
             * allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
             * More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
             */
            distributedDDL?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecDefaultsDistributedddlArgs>;
            /**
             * define should replicas be specified by FQDN in `<host></host>`.
             * In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
             * "yes" by default
             */
            replicasUseFQDN?: pulumi.Input<string>;
            /**
             * default storage management options
             */
            storageManagement?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecDefaultsStoragemanagementArgs>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecDefaultsTemplatesArgs>;
        }

        /**
         * allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
         * More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
         */
        export interface ClickHouseInstallationSpecDefaultsDistributedddlArgs {
            /**
             * Settings from this profile will be used to execute DDL queries
             */
            profile?: pulumi.Input<string>;
        }

        /**
         * default storage management options
         */
        export interface ClickHouseInstallationSpecDefaultsStoragemanagementArgs {
            /**
             * defines `PVC` provisioner - be it StatefulSet or the Operator
             */
            provisioner?: pulumi.Input<string>;
            /**
             * defines behavior of `PVC` deletion.
             * `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
         */
        export interface ClickHouseInstallationSpecDefaultsTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
         */
        export interface ClickHouseInstallationSpecReconcilingArgs {
            /**
             * optional, define behavior for cleanup Kubernetes resources during reconcile cycle
             */
            cleanup?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecReconcilingCleanupArgs>;
            /**
             * timeout in seconds when `clickhouse-operator` will wait when applied `ConfigMap` during reconcile `ClickhouseInstallation` pods will updated from cache
             * see details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
             */
            configMapPropagationTimeout?: pulumi.Input<number>;
            /**
             * DEPRECATED
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * optional, define behavior for cleanup Kubernetes resources during reconcile cycle
         */
        export interface ClickHouseInstallationSpecReconcilingCleanupArgs {
            /**
             * what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`
             */
            reconcileFailedObjects?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecReconcilingCleanupReconcilefailedobjectsArgs>;
            /**
             * what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`
             */
            unknownObjects?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecReconcilingCleanupUnknownobjectsArgs>;
        }

        /**
         * what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`
         */
        export interface ClickHouseInstallationSpecReconcilingCleanupReconcilefailedobjectsArgs {
            /**
             * behavior policy for failed ConfigMap reconciling, Retain by default
             */
            configMap?: pulumi.Input<string>;
            /**
             * behavior policy for failed PVC reconciling, Retain by default
             */
            pvc?: pulumi.Input<string>;
            /**
             * behavior policy for failed Service reconciling, Retain by default
             */
            service?: pulumi.Input<string>;
            /**
             * behavior policy for failed StatefulSet reconciling, Retain by default
             */
            statefulSet?: pulumi.Input<string>;
        }

        /**
         * what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`
         */
        export interface ClickHouseInstallationSpecReconcilingCleanupUnknownobjectsArgs {
            /**
             * behavior policy for unknown ConfigMap, Delete by default
             */
            configMap?: pulumi.Input<string>;
            /**
             * behavior policy for unknown PVC, Delete by default
             */
            pvc?: pulumi.Input<string>;
            /**
             * behavior policy for unknown Service, Delete by default
             */
            service?: pulumi.Input<string>;
            /**
             * behavior policy for unknown StatefulSet, Delete by default
             */
            statefulSet?: pulumi.Input<string>;
        }

        /**
         * allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
         */
        export interface ClickHouseInstallationSpecTemplatesArgs {
            /**
             * hostTemplate will use during apply to generate `clickhose-server` config files
             */
            hostTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesHosttemplatesArgs>[]>;
            /**
             * podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
             * More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
             */
            podTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesPodtemplatesArgs>[]>;
            /**
             * allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
             */
            serviceTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesServicetemplatesArgs>[]>;
            /**
             * allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesVolumeclaimtemplatesArgs>[]>;
        }

        export interface ClickHouseInstallationSpecTemplatesHosttemplatesArgs {
            /**
             * template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
             */
            portDistribution?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesHosttemplatesPortdistributionArgs>[]>;
            spec?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesHosttemplatesSpecArgs>;
        }

        export interface ClickHouseInstallationSpecTemplatesHosttemplatesPortdistributionArgs {
            /**
             * type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
             */
            type?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationSpecTemplatesHosttemplatesSpecArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
             * if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
             * More info: https://clickhouse.tech/docs/en/interfaces/http/
             */
            httpPort?: pulumi.Input<number>;
            httpsPort?: pulumi.Input<number>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
             * if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
             * More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
             */
            interserverHTTPPort?: pulumi.Input<number>;
            /**
             * by default, hostname will generate, but this allows define custom name for each `clickhuse-server`
             */
            name?: pulumi.Input<string>;
            /**
             * optional, open secure ports
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
             * if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
             * More info: https://clickhouse.tech/docs/en/interfaces/tcp/
             */
            tcpPort?: pulumi.Input<number>;
            /**
             * be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesHosttemplatesSpecTemplatesArgs>;
            tlsPort?: pulumi.Input<number>;
        }

        /**
         * be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
         */
        export interface ClickHouseInstallationSpecTemplatesHosttemplatesSpecTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationSpecTemplatesPodtemplatesArgs {
            /**
             * DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
             */
            distribution?: pulumi.Input<string>;
            /**
             * allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables
             */
            generateName?: pulumi.Input<string>;
            /**
             * allows pass standard object's metadata from template to Pod
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
             */
            podDistribution?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesPodtemplatesPoddistributionArgs>[]>;
            /**
             * allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
             */
            spec?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
             */
            zone?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationSpecTemplatesPodtemplatesZoneArgs>;
        }

        export interface ClickHouseInstallationSpecTemplatesPodtemplatesPoddistributionArgs {
            /**
             * define, how much ClickHouse Pods could be inside selected scope with selected distribution type
             */
            number?: pulumi.Input<number>;
            /**
             * scope for apply each podDistribution
             */
            scope?: pulumi.Input<string>;
            /**
             * use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`, More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * you can define multiple affinity policy types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
         */
        export interface ClickHouseInstallationSpecTemplatesPodtemplatesZoneArgs {
            /**
             * optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
             */
            key?: pulumi.Input<string>;
            /**
             * optional, if defined, allows select kubernetes nodes by label with `value` in `values`
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClickHouseInstallationSpecTemplatesServicetemplatesArgs {
            /**
             * allows define format for generated `Service` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables
             */
            generateName?: pulumi.Input<string>;
            /**
             * allows pass standard object's metadata from template to Service
             * Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * template name, could use to link inside
             * chi-level `chi.spec.defaults.templates.serviceTemplate`
             * cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
             * shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
             * replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * describe behavior of generated Service
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            spec?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClickHouseInstallationSpecTemplatesVolumeclaimtemplatesArgs {
            /**
             * allows to pass standard object's metadata from template to PVC
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * template name, could use to link inside
             * top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
             * cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
             * shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
             * replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * defines `PVC` provisioner - be it StatefulSet or the Operator
             */
            provisioner?: pulumi.Input<string>;
            /**
             * defines behavior of `PVC` deletion.
             * `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
             */
            reclaimPolicy?: pulumi.Input<string>;
            /**
             * allows define all aspects of `PVC` resource
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
             */
            spec?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation
         */
        export interface ClickHouseInstallationSpecTemplatingArgs {
            /**
             * when defined as `auto` inside ClickhouseInstallationTemplate, it will auto add into all ClickHouseInstallation, manual value is default
             */
            policy?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationSpecUsetemplatesArgs {
            /**
             * name of `ClickHouseInstallationTemplate` (chit) resource
             */
            name?: pulumi.Input<string>;
            /**
             * Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clichouse-operator`
             */
            namespace?: pulumi.Input<string>;
            /**
             * optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
             */
            useType?: pulumi.Input<string>;
        }

        /**
         * Current ClickHouseInstallation manifest status, contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
         */
        export interface ClickHouseInstallationStatusArgs {
            /**
             * Action
             */
            action?: pulumi.Input<string>;
            /**
             * Actions
             */
            actions?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ClickHouse operator git commit SHA
             */
            chopCommit?: pulumi.Input<string>;
            /**
             * ClickHouse operator build date
             */
            chopDate?: pulumi.Input<string>;
            /**
             * IP address of the operator's pod which managed this CHI
             */
            chopIp?: pulumi.Input<string>;
            /**
             * ClickHouse operator version
             */
            chopVersion?: pulumi.Input<string>;
            /**
             * Clusters count
             */
            clusters?: pulumi.Input<number>;
            /**
             * Endpoint
             */
            endpoint?: pulumi.Input<string>;
            /**
             * Last error
             */
            error?: pulumi.Input<string>;
            /**
             * Errors
             */
            errors?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Pods FQDNs
             */
            fqdns?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Generation
             */
            generation?: pulumi.Input<number>;
            /**
             * Hosts count
             */
            hosts?: pulumi.Input<number>;
            /**
             * Added Hosts count
             */
            hostsAdded?: pulumi.Input<number>;
            /**
             * Completed Hosts count
             */
            hostsCompleted?: pulumi.Input<number>;
            /**
             * About to delete Hosts count
             */
            hostsDelete?: pulumi.Input<number>;
            /**
             * Deleted Hosts count
             */
            hostsDeleted?: pulumi.Input<number>;
            /**
             * Updated Hosts count
             */
            hostsUpdated?: pulumi.Input<number>;
            /**
             * List of hosts with tables created by the operator
             */
            hostsWithTablesCreated?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Normalized CHI requested
             */
            normalized?: pulumi.Input<{[key: string]: any}>;
            /**
             * Normalized CHI completed
             */
            normalizedCompleted?: pulumi.Input<{[key: string]: any}>;
            /**
             * Pod IPs
             */
            podIps?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Pods
             */
            pods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Replicas count
             */
            replicas?: pulumi.Input<number>;
            /**
             * Shards count
             */
            shards?: pulumi.Input<number>;
            /**
             * Status
             */
            status?: pulumi.Input<string>;
            /**
             * Current task id
             */
            taskID?: pulumi.Input<string>;
            /**
             * Completed task ids
             */
            taskIDsCompleted?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Started task ids
             */
            taskIDsStarted?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of the desired behavior of one or more ClickHouse clusters
         * More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md
         */
        export interface ClickHouseInstallationTemplateSpecArgs {
            /**
             * allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
             */
            configuration?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationArgs>;
            /**
             * define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
             * More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
             */
            defaults?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecDefaultsArgs>;
            /**
             * custom domain suffix which will add to end of `Service` or `Pod` name, use it when you use custom cluster domain in your Kubernetes cluster
             */
            namespaceDomainPattern?: pulumi.Input<string>;
            /**
             * optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
             */
            reconciling?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecReconcilingArgs>;
            /**
             * This is a 'soft restart' button. When set to 'RollingUpdate' operator will restart ClickHouse pods in a graceful way. Remove it after the use in order to avoid unneeded restarts
             */
            restart?: pulumi.Input<string>;
            /**
             * Allow stop all ClickHouse clusters described in current chi.
             * Stop mechanism works as follows:
             *  - When `stop` is `1` then setup `Replicas: 0` in each related to current `chi` StatefulSet resource, all `Pods` and `Service` resources will desctroy, but PVCs still live
             *  - When `stop` is `0` then `Pods` will created again and will attach retained PVCs and `Service` also will created again
             */
            stop?: pulumi.Input<string>;
            /**
             * Allows to define custom taskID for named update operation and watch status of this update execution in .status.taskIDs field.
             * By default every update of chi manifest will generate random taskID
             */
            taskID?: pulumi.Input<string>;
            /**
             * allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesArgs>;
            /**
             * optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation
             */
            templating?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatingArgs>;
            /**
             * allows troubleshoot Pods during CrashLoopBack state, when you apply wrong configuration, `clickhouse-server` wouldn't startup
             */
            troubleshoot?: pulumi.Input<string>;
            /**
             * list of `ClickHouseInstallationTemplate` (chit) resource names which will merge with current `Chi` manifest during render Kubernetes resources to create related ClickHouse clusters
             */
            useTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecUsetemplatesArgs>[]>;
        }

        /**
         * allows configure multiple aspects and behavior for `clickhouse-server` instance and also allows describe multiple `clickhouse-server` clusters inside one `chi` resource
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationArgs {
            /**
             * describes ClickHouse clusters layout and allows change settings on cluster-level, shard-level and replica-level
             * every cluster is a set of StatefulSet, one StatefulSet contains only one Pod with `clickhouse-server`
             * all Pods will rendered in <remote_server> part of ClickHouse configs, mounted from ConfigMap as `/etc/clickhouse-server/config.d/chop-generated-remote_servers.xml`
             * Clusters will use for Distributed table engine, more details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
             * If `cluster` contains zookeeper settings (could be inherited from top `chi` level), when you can create *ReplicatedMergeTree tables
             */
            clusters?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersArgs>[]>;
            /**
             * allows define content of any setting file inside each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * every key in this object is the file name
             * every value in this object is the file content
             * you can use `!!binary |` and base64 for binary files, see details here https://yaml.org/type/binary.html
             * each key could contains prefix like USERS, COMMON, HOST or config.d, users.d, cond.d, wrong prefixes will ignored, subfolders also will ignored
             * More details: https://github.com/Altinity/clickhouse-operator/blob/master/docs/chi-examples/05-settings-05-files-nested.yaml
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><profiles>..</profiles></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
             * you can configure any aspect of settings profile
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings-profiles/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationprofiles
             */
            profiles?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><quotas>..</quotas></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
             * you can configure any aspect of resource quotas
             * More details: https://clickhouse.tech/docs/en/operations/quotas/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationquotas
             */
            quotas?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationsettings
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><users>..</users></yandex> section in each `Pod` during generate `ConfigMap` which will mount in `/etc/clickhouse-server/users.d/`
             * you can configure password hashed, authorization restrictions, database level security row filters etc.
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings-users/
             * Your yaml code will convert to XML, see examples https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specconfigurationusers
             */
            users?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
             * `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
             * currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
             * More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
             */
            zookeeper?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationClustersArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` on current cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * describe current cluster layout, how much shards in cluster, how much replica in shard
             * allows override settings on each shard and replica separatelly
             */
            layout?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs>;
            /**
             * cluster name, used to identify set of ClickHouse servers and wide used during generate names of related Kubernetes resources
             */
            name?: pulumi.Input<string>;
            /**
             * describes how schema is propagated within replicas and shards
             */
            schemaPolicy?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersSchemapolicyArgs>;
            /**
             * optional, shared secret value to secure cluster communications
             */
            secret?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs>;
            /**
             * optional, open secure ports for cluster
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one cluster during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
             * override top-level `chi.spec.configuration.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
             * override top-level `chi.spec.configuration.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs>;
            /**
             * optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
             * override top-level `chi.spec.configuration.zookeeper` settings
             */
            zookeeper?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs>;
        }

        /**
         * describe current cluster layout, how much shards in cluster, how much replica in shard
         * allows override settings on each shard and replica separatelly
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutArgs {
            /**
             * optional, allows override top-level `chi.spec.configuration` and cluster-level `chi.spec.configuration.clusters` configuration for each replica and each shard relates to selected replica, use it only if you fully understand what you do
             */
            replicas?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs>[]>;
            /**
             * how much replicas in each shards for current ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance, every shard contains 1 replica by default
             */
            replicasCount?: pulumi.Input<number>;
            /**
             * optional, allows override top-level `chi.spec.configuration`, cluster-level `chi.spec.configuration.clusters` settings for each shard separately, use it only if you fully understand what you do
             */
            shards?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs>[]>;
            /**
             * how much shards for current ClickHouse cluster will run in Kubernetes, each shard contains shared-nothing part of data and contains set of replicas, cluster contains 1 shard by default
             */
            shardsCount?: pulumi.Input<number>;
            /**
             * DEPRECATED - to be removed soon
             */
            type?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, by default replica name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and will ignore if shard-level `chi.spec.configuration.clusters.layout.shards` present
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, list of shards related to current replica, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
             */
            shards?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs>[]>;
            /**
             * optional, count of shards related to current replica, you can override each shard behavior on low-level `chi.spec.configuration.clusters.layout.replicas.shards`
             */
            shardsCount?: pulumi.Input<number>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
             * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`, will ignore if `chi.spec.configuration.clusters.layout.shards` presents
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `http` for selected shard, override `chi.spec.templates.hostTemplates.spec.httpPort`
             * allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
             */
            httpPort?: pulumi.Input<number>;
            httpsPort?: pulumi.Input<number>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `interserver` for selected shard, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
             * allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
             */
            interserverHTTPPort?: pulumi.Input<number>;
            /**
             * optional, by default shard name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, open secure ports
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one shard related to current replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and replica-level `chi.spec.configuration.clusters.layout.replicas.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `tcp` for selected shard, override `chi.spec.templates.hostTemplates.spec.tcpPort`
             * allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
             */
            tcpPort?: pulumi.Input<number>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
             * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs>;
            tlsPort?: pulumi.Input<number>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
         * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates`
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasShardsTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
         * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates`
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutReplicasTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsArgs {
            /**
             * DEPRECATED - to be removed soon
             */
            definitionType?: pulumi.Input<string>;
            /**
             * optional, allows define content of any setting file inside each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files` and cluster-level `chi.spec.configuration.clusters.files`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, `true` by default when `chi.spec.configuration.clusters[].layout.ReplicaCount` > 1 and 0 otherwise
             * allows setup <internal_replication> setting which will use during insert into tables with `Distributed` engine for insert only in one live replica and other replicas will download inserted data during replication,
             * will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
             * More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
             */
            internalReplication?: pulumi.Input<string>;
            /**
             * optional, by default shard name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, allows override behavior for selected replicas from cluster-level `chi.spec.configuration.clusters` and shard-level `chi.spec.configuration.clusters.layout.shards`
             */
            replicas?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs>[]>;
            /**
             * optional, how much replicas in selected shard for selected ClickHouse cluster will run in Kubernetes, each replica is a separate `StatefulSet` which contains only one `Pod` with `clickhouse-server` instance,
             * shard contains 1 replica by default
             * override cluster-level `chi.spec.configuration.clusters.layout.replicasCount`
             */
            replicasCount?: pulumi.Input<number>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` only in one shard during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/`
             * override top-level `chi.spec.configuration.settings` and cluster-level `chi.spec.configuration.clusters.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
             * override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs>;
            /**
             * optional, 1 by default, allows setup shard <weight> setting which will use during insert into tables with `Distributed` engine,
             * will apply in <remote_servers> inside ConfigMap which will mount in /etc/clickhouse-server/config.d/chop-generated-remote_servers.xml
             * More details: https://clickhouse.tech/docs/en/engines/table-engines/special/distributed/
             */
            weight?: pulumi.Input<number>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasArgs {
            /**
             * optional, allows define content of any setting file inside `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             * override top-level `chi.spec.configuration.files`, cluster-level `chi.spec.configuration.clusters.files` and shard-level `chi.spec.configuration.clusters.layout.shards.files`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `http` for selected replica, override `chi.spec.templates.hostTemplates.spec.httpPort`
             * allows connect to `clickhouse-server` via HTTP protocol via kubernetes `Service`
             */
            httpPort?: pulumi.Input<number>;
            httpsPort?: pulumi.Input<number>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `interserver` for selected replica, override `chi.spec.templates.hostTemplates.spec.interserverHTTPPort`
             * allows connect between replicas inside same shard during fetch replicated data parts HTTP protocol
             */
            interserverHTTPPort?: pulumi.Input<number>;
            /**
             * optional, by default replica name is generated, but you can override it and setup custom name
             */
            name?: pulumi.Input<string>;
            /**
             * optional, open secure ports
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in `Pod` only in one replica during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * override top-level `chi.spec.configuration.settings`, cluster-level `chi.spec.configuration.clusters.settings` and shard-level `chi.spec.configuration.clusters.layout.shards.settings`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `Pod.spec.containers.ports` with name `tcp` for selected replica, override `chi.spec.templates.hostTemplates.spec.tcpPort`
             * allows connect to `clickhouse-server` via TCP Native protocol via kubernetes `Service`
             */
            tcpPort?: pulumi.Input<number>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
             * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs>;
            tlsPort?: pulumi.Input<number>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected replica
         * override top-level `chi.spec.configuration.templates`, cluster-level `chi.spec.configuration.clusters.templates` and shard-level `chi.spec.configuration.clusters.layout.shards.templates`
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsReplicasTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected shard
         * override top-level `chi.spec.configuration.templates` and cluster-level `chi.spec.configuration.clusters.templates`
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersLayoutShardsTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * describes how schema is propagated within replicas and shards
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersSchemapolicyArgs {
            /**
             * how schema is propagated within a replica
             */
            replica?: pulumi.Input<string>;
            /**
             * how schema is propagated between shards
             */
            shard?: pulumi.Input<string>;
        }

        /**
         * optional, shared secret value to secure cluster communications
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersSecretArgs {
            /**
             * Auto-generate shared secret value to secure cluster communications
             */
            auto?: pulumi.Input<string>;
            /**
             * Cluster shared secret value in plain text
             */
            value?: pulumi.Input<string>;
            /**
             * Cluster shared secret source
             */
            valueFrom?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersSecretValuefromArgs>;
        }

        /**
         * Cluster shared secret source
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersSecretValuefromArgs {
            /**
             * Selects a key of a secret in the clickhouse installation namespace.
             * Should not be used if value is not empty.
             */
            secretKeyRef?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersSecretValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a secret in the clickhouse installation namespace.
         * Should not be used if value is not empty.
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersSecretValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from. Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info:
             * https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to selected cluster
         * override top-level `chi.spec.configuration.templates`
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` only in current ClickHouse cluster, during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
         * override top-level `chi.spec.configuration.zookeeper` settings
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperArgs {
            /**
             * optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
             */
            identity?: pulumi.Input<string>;
            /**
             * describe every available zookeeper cluster node for interaction
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs>[]>;
            /**
             * one operation timeout during Zookeeper transactions
             */
            operation_timeout_ms?: pulumi.Input<number>;
            /**
             * optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
             */
            root?: pulumi.Input<string>;
            /**
             * session timeout during connect to Zookeeper
             */
            session_timeout_ms?: pulumi.Input<number>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationClustersZookeeperNodesArgs {
            /**
             * dns name or ip address for Zookeeper node
             */
            host?: pulumi.Input<string>;
            /**
             * TCP port which used to connect to Zookeeper node
             */
            port?: pulumi.Input<number>;
            /**
             * if a secure connection to Zookeeper is required
             */
            secure?: pulumi.Input<string>;
        }

        /**
         * allows configure <yandex><zookeeper>..</zookeeper></yandex> section in each `Pod` during generate `ConfigMap` which will mounted in `/etc/clickhouse-server/config.d/`
         * `clickhouse-operator` itself doesn't manage Zookeeper, please install Zookeeper separatelly look examples on https://github.com/Altinity/clickhouse-operator/tree/master/deploy/zookeeper/
         * currently, zookeeper (or clickhouse-keeper replacement) used for *ReplicatedMergeTree table engines and for `distributed_ddl`
         * More details: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings_zookeeper
         */
        export interface ClickHouseInstallationTemplateSpecConfigurationZookeeperArgs {
            /**
             * optional access credentials string with `user:password` format used when use digest authorization in Zookeeper
             */
            identity?: pulumi.Input<string>;
            /**
             * describe every available zookeeper cluster node for interaction
             */
            nodes?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs>[]>;
            /**
             * one operation timeout during Zookeeper transactions
             */
            operation_timeout_ms?: pulumi.Input<number>;
            /**
             * optional root znode path inside zookeeper to store ClickHouse related data (replication queue or distributed DDL)
             */
            root?: pulumi.Input<string>;
            /**
             * session timeout during connect to Zookeeper
             */
            session_timeout_ms?: pulumi.Input<number>;
        }

        export interface ClickHouseInstallationTemplateSpecConfigurationZookeeperNodesArgs {
            /**
             * dns name or ip address for Zookeeper node
             */
            host?: pulumi.Input<string>;
            /**
             * TCP port which used to connect to Zookeeper node
             */
            port?: pulumi.Input<number>;
            /**
             * if a secure connection to Zookeeper is required
             */
            secure?: pulumi.Input<string>;
        }

        /**
         * define default behavior for whole ClickHouseInstallation, some behavior can be re-define on cluster, shard and replica level
         * More info: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#specdefaults
         */
        export interface ClickHouseInstallationTemplateSpecDefaultsArgs {
            /**
             * allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
             * More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
             */
            distributedDDL?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecDefaultsDistributedddlArgs>;
            /**
             * define should replicas be specified by FQDN in `<host></host>`.
             * In case of "no" will use short hostname and clickhouse-server will use kubernetes default suffixes for DNS lookup
             * "yes" by default
             */
            replicasUseFQDN?: pulumi.Input<string>;
            /**
             * default storage management options
             */
            storageManagement?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecDefaultsStoragemanagementArgs>;
            /**
             * optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs>;
        }

        /**
         * allows change `<yandex><distributed_ddl></distributed_ddl></yandex>` settings
         * More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#server-settings-distributed_ddl
         */
        export interface ClickHouseInstallationTemplateSpecDefaultsDistributedddlArgs {
            /**
             * Settings from this profile will be used to execute DDL queries
             */
            profile?: pulumi.Input<string>;
        }

        /**
         * default storage management options
         */
        export interface ClickHouseInstallationTemplateSpecDefaultsStoragemanagementArgs {
            /**
             * defines `PVC` provisioner - be it StatefulSet or the Operator
             */
            provisioner?: pulumi.Input<string>;
            /**
             * defines behavior of `PVC` deletion.
             * `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
             */
            reclaimPolicy?: pulumi.Input<string>;
        }

        /**
         * optional, configuration of the templates names which will use for generate Kubernetes resources according to one or more ClickHouse clusters described in current ClickHouseInstallation (chi) resource
         */
        export interface ClickHouseInstallationTemplateSpecDefaultsTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        /**
         * optional, allows tuning reconciling cycle for ClickhouseInstallation from clickhouse-operator side
         */
        export interface ClickHouseInstallationTemplateSpecReconcilingArgs {
            /**
             * optional, define behavior for cleanup Kubernetes resources during reconcile cycle
             */
            cleanup?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecReconcilingCleanupArgs>;
            /**
             * timeout in seconds when `clickhouse-operator` will wait when applied `ConfigMap` during reconcile `ClickhouseInstallation` pods will updated from cache
             * see details: https://kubernetes.io/docs/concepts/configuration/configmap/#mounted-configmaps-are-updated-automatically
             */
            configMapPropagationTimeout?: pulumi.Input<number>;
            /**
             * DEPRECATED
             */
            policy?: pulumi.Input<string>;
        }

        /**
         * optional, define behavior for cleanup Kubernetes resources during reconcile cycle
         */
        export interface ClickHouseInstallationTemplateSpecReconcilingCleanupArgs {
            /**
             * what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`
             */
            reconcileFailedObjects?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecReconcilingCleanupReconcilefailedobjectsArgs>;
            /**
             * what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`
             */
            unknownObjects?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownobjectsArgs>;
        }

        /**
         * what clickhouse-operator shall do when reconciling Kubernetes resources are failed, default behavior is `Retain`
         */
        export interface ClickHouseInstallationTemplateSpecReconcilingCleanupReconcilefailedobjectsArgs {
            /**
             * behavior policy for failed ConfigMap reconciling, Retain by default
             */
            configMap?: pulumi.Input<string>;
            /**
             * behavior policy for failed PVC reconciling, Retain by default
             */
            pvc?: pulumi.Input<string>;
            /**
             * behavior policy for failed Service reconciling, Retain by default
             */
            service?: pulumi.Input<string>;
            /**
             * behavior policy for failed StatefulSet reconciling, Retain by default
             */
            statefulSet?: pulumi.Input<string>;
        }

        /**
         * what clickhouse-operator shall do when found Kubernetes resources which should be managed with clickhouse-operator, but not have `ownerReference` to any currently managed `ClickHouseInstallation` resource, default behavior is `Delete`
         */
        export interface ClickHouseInstallationTemplateSpecReconcilingCleanupUnknownobjectsArgs {
            /**
             * behavior policy for unknown ConfigMap, Delete by default
             */
            configMap?: pulumi.Input<string>;
            /**
             * behavior policy for unknown PVC, Delete by default
             */
            pvc?: pulumi.Input<string>;
            /**
             * behavior policy for unknown Service, Delete by default
             */
            service?: pulumi.Input<string>;
            /**
             * behavior policy for unknown StatefulSet, Delete by default
             */
            statefulSet?: pulumi.Input<string>;
        }

        /**
         * allows define templates which will use for render Kubernetes resources like StatefulSet, ConfigMap, Service, PVC, by default, clickhouse-operator have own templates, but you can override it
         */
        export interface ClickHouseInstallationTemplateSpecTemplatesArgs {
            /**
             * hostTemplate will use during apply to generate `clickhose-server` config files
             */
            hostTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesHosttemplatesArgs>[]>;
            /**
             * podTemplate will use during render `Pod` inside `StatefulSet.spec` and allows define rendered `Pod.spec`, pod scheduling distribution and pod zone
             * More information: https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatespodtemplates
             */
            podTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesPodtemplatesArgs>[]>;
            /**
             * allows define template for rendering `Service` which would get endpoint from Pods which scoped chi-wide, cluster-wide, shard-wide, replica-wide level
             */
            serviceTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesServicetemplatesArgs>[]>;
            /**
             * allows define template for rendering `PVC` kubernetes resource, which would use inside `Pod` for mount clickhouse `data`, clickhouse `logs` or something else
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesVolumeclaimtemplatesArgs>[]>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesHosttemplatesArgs {
            /**
             * template name, could use to link inside top-level `chi.spec.defaults.templates.hostTemplate`, cluster-level `chi.spec.configuration.clusters.templates.hostTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.hostTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.hostTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * define how will distribute numeric values of named ports in `Pod.spec.containers.ports` and clickhouse-server configs
             */
            portDistribution?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesHosttemplatesPortdistributionArgs>[]>;
            spec?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesHosttemplatesSpecArgs>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesHosttemplatesPortdistributionArgs {
            /**
             * type of distribution, when `Unspecified` (default value) then all listen ports on clickhouse-server configuration in all Pods will have the same value, when `ClusterScopeIndex` then ports will increment to offset from base value depends on shard and replica index inside cluster with combination of `chi.spec.templates.podTemlates.spec.HostNetwork` it allows setup ClickHouse cluster inside Kubernetes and provide access via external network bypass Kubernetes internal network
             */
            type?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesHosttemplatesSpecArgs {
            /**
             * optional, allows define content of any setting file inside each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/config.d/` or `/etc/clickhouse-server/conf.d/` or `/etc/clickhouse-server/users.d/`
             */
            files?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `http_port` inside `clickhouse-server` settings for each Pod where current template will apply
             * if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=http]`
             * More info: https://clickhouse.tech/docs/en/interfaces/http/
             */
            httpPort?: pulumi.Input<number>;
            httpsPort?: pulumi.Input<number>;
            /**
             * optional, open insecure ports for cluster, defaults to "yes"
             */
            insecure?: pulumi.Input<string>;
            /**
             * optional, setup `interserver_http_port` inside `clickhouse-server` settings for each Pod where current template will apply
             * if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=interserver]`
             * More info: https://clickhouse.tech/docs/en/operations/server-configuration-parameters/settings/#interserver-http-port
             */
            interserverHTTPPort?: pulumi.Input<number>;
            /**
             * by default, hostname will generate, but this allows define custom name for each `clickhuse-server`
             */
            name?: pulumi.Input<string>;
            /**
             * optional, open secure ports
             */
            secure?: pulumi.Input<string>;
            /**
             * optional, allows configure `clickhouse-server` settings inside <yandex>...</yandex> tag in each `Pod` where this template will apply during generate `ConfigMap` which will mount in `/etc/clickhouse-server/conf.d/`
             * More details: https://clickhouse.tech/docs/en/operations/settings/settings/
             */
            settings?: pulumi.Input<{[key: string]: any}>;
            /**
             * optional, setup `tcp_port` inside `clickhouse-server` settings for each Pod where current template will apply
             * if specified, should have equal value with `chi.spec.templates.podTemplates.spec.containers.ports[name=tcp]`
             * More info: https://clickhouse.tech/docs/en/interfaces/tcp/
             */
            tcpPort?: pulumi.Input<number>;
            /**
             * be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
             */
            templates?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesHosttemplatesSpecTemplatesArgs>;
            tlsPort?: pulumi.Input<number>;
        }

        /**
         * be careful, this part of CRD allows override template inside template, don't use it if you don't understand what you do
         */
        export interface ClickHouseInstallationTemplateSpecTemplatesHosttemplatesSpecTemplatesArgs {
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            clusterServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse data directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            dataVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.hostTemplates, which will apply to configure every `clickhouse-server` instance during render ConfigMap resources which will mount into `Pod`
             */
            hostTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.volumeClaimTemplates, allows customization each `PVC` which will mount for clickhouse log directory in each `Pod` during render and reconcile every StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            logVolumeClaimTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.podTemplates, allows customization each `Pod` resource during render and reconcile each StatefulSet.spec resource described in `chi.spec.configuration.clusters`
             */
            podTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each replica inside each shard inside each clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            replicaServiceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for one `Service` resource which will created by `clickhouse-operator` which cover all clusters in whole `chi` resource
             */
            serviceTemplate?: pulumi.Input<string>;
            /**
             * optional, template name from chi.spec.templates.serviceTemplates, allows customization for each `Service` resource which will created by `clickhouse-operator` which cover each shard inside clickhouse cluster described in `chi.spec.configuration.clusters`
             */
            shardServiceTemplate?: pulumi.Input<string>;
            /**
             * DEPRECATED! VolumeClaimTemplate is deprecated in favor of DataVolumeClaimTemplate and LogVolumeClaimTemplate
             */
            volumeClaimTemplate?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesPodtemplatesArgs {
            /**
             * DEPRECATED, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
             */
            distribution?: pulumi.Input<string>;
            /**
             * allows define format for generated `Pod` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables
             */
            generateName?: pulumi.Input<string>;
            /**
             * allows pass standard object's metadata from template to Pod
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * template name, could use to link inside top-level `chi.spec.defaults.templates.podTemplate`, cluster-level `chi.spec.configuration.clusters.templates.podTemplate`, shard-level `chi.spec.configuration.clusters.layout.shards.temlates.podTemplate`, replica-level `chi.spec.configuration.clusters.layout.replicas.templates.podTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * define ClickHouse Pod distribution policy between Kubernetes Nodes inside Shard, Replica, Namespace, CHI, another ClickHouse cluster
             */
            podDistribution?: pulumi.Input<pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesPodtemplatesPoddistributionArgs>[]>;
            /**
             * allows define whole Pod.spec inside StaefulSet.spec, look to https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates for details
             */
            spec?: pulumi.Input<{[key: string]: any}>;
            /**
             * allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
             */
            zone?: pulumi.Input<inputs.clickhouse.v1.ClickHouseInstallationTemplateSpecTemplatesPodtemplatesZoneArgs>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesPodtemplatesPoddistributionArgs {
            /**
             * define, how much ClickHouse Pods could be inside selected scope with selected distribution type
             */
            number?: pulumi.Input<number>;
            /**
             * scope for apply each podDistribution
             */
            scope?: pulumi.Input<string>;
            /**
             * use for inter-pod affinity look to `pod.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.topologyKey`, More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
             */
            topologyKey?: pulumi.Input<string>;
            /**
             * you can define multiple affinity policy types
             */
            type?: pulumi.Input<string>;
        }

        /**
         * allows define custom zone name and will separate ClickHouse `Pods` between nodes, shortcut for `chi.spec.templates.podTemplates.spec.affinity.podAntiAffinity`
         */
        export interface ClickHouseInstallationTemplateSpecTemplatesPodtemplatesZoneArgs {
            /**
             * optional, if defined, allows select kubernetes nodes by label with `name` equal `key`
             */
            key?: pulumi.Input<string>;
            /**
             * optional, if defined, allows select kubernetes nodes by label with `value` in `values`
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesServicetemplatesArgs {
            /**
             * allows define format for generated `Service` name, look to https://github.com/Altinity/clickhouse-operator/blob/master/docs/custom_resource_explained.md#spectemplatesservicetemplates for details about aviailable template variables
             */
            generateName?: pulumi.Input<string>;
            /**
             * allows pass standard object's metadata from template to Service
             * Could be use for define specificly for Cloud Provider metadata which impact to behavior of service
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * template name, could use to link inside
             * chi-level `chi.spec.defaults.templates.serviceTemplate`
             * cluster-level `chi.spec.configuration.clusters.templates.clusterServiceTemplate`
             * shard-level `chi.spec.configuration.clusters.layout.shards.temlates.shardServiceTemplate`
             * replica-level `chi.spec.configuration.clusters.layout.replicas.templates.replicaServiceTemplate` or `chi.spec.configuration.clusters.layout.shards.replicas.replicaServiceTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * describe behavior of generated Service
             * More info: https://kubernetes.io/docs/concepts/services-networking/service/
             */
            spec?: pulumi.Input<{[key: string]: any}>;
        }

        export interface ClickHouseInstallationTemplateSpecTemplatesVolumeclaimtemplatesArgs {
            /**
             * allows to pass standard object's metadata from template to PVC
             * More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * template name, could use to link inside
             * top-level `chi.spec.defaults.templates.dataVolumeClaimTemplate` or `chi.spec.defaults.templates.logVolumeClaimTemplate`,
             * cluster-level `chi.spec.configuration.clusters.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.templates.logVolumeClaimTemplate`,
             * shard-level `chi.spec.configuration.clusters.layout.shards.temlates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.shards.temlates.logVolumeClaimTemplate`
             * replica-level `chi.spec.configuration.clusters.layout.replicas.templates.dataVolumeClaimTemplate` or `chi.spec.configuration.clusters.layout.replicas.templates.logVolumeClaimTemplate`
             */
            name?: pulumi.Input<string>;
            /**
             * defines `PVC` provisioner - be it StatefulSet or the Operator
             */
            provisioner?: pulumi.Input<string>;
            /**
             * defines behavior of `PVC` deletion.
             * `Delete` by default, if `Retain` specified then `PVC` will be kept when deleting StatefulSet
             */
            reclaimPolicy?: pulumi.Input<string>;
            /**
             * allows define all aspects of `PVC` resource
             * More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
             */
            spec?: pulumi.Input<{[key: string]: any}>;
        }

        /**
         * optional, define policy for auto applying ClickHouseInstallationTemplate inside ClickHouseInstallation
         */
        export interface ClickHouseInstallationTemplateSpecTemplatingArgs {
            /**
             * when defined as `auto` inside ClickhouseInstallationTemplate, it will auto add into all ClickHouseInstallation, manual value is default
             */
            policy?: pulumi.Input<string>;
        }

        export interface ClickHouseInstallationTemplateSpecUsetemplatesArgs {
            /**
             * name of `ClickHouseInstallationTemplate` (chit) resource
             */
            name?: pulumi.Input<string>;
            /**
             * Kubernetes namespace where need search `chit` resource, depending on `watchNamespaces` settings in `clichouse-operator`
             */
            namespace?: pulumi.Input<string>;
            /**
             * optional, current strategy is only merge, and current `chi` settings have more priority than merged template `chit`
             */
            useType?: pulumi.Input<string>;
        }

        /**
         * Current ClickHouseInstallation manifest status, contains many fields like a normalized configuration, clickhouse-operator version, current action and all applied action list, current taskID and all applied taskIDs and other
         */
        export interface ClickHouseInstallationTemplateStatusArgs {
            /**
             * Action
             */
            action?: pulumi.Input<string>;
            /**
             * Actions
             */
            actions?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ClickHouse operator git commit SHA
             */
            chopCommit?: pulumi.Input<string>;
            /**
             * ClickHouse operator build date
             */
            chopDate?: pulumi.Input<string>;
            /**
             * IP address of the operator's pod which managed this CHI
             */
            chopIp?: pulumi.Input<string>;
            /**
             * ClickHouse operator version
             */
            chopVersion?: pulumi.Input<string>;
            /**
             * Clusters count
             */
            clusters?: pulumi.Input<number>;
            /**
             * Endpoint
             */
            endpoint?: pulumi.Input<string>;
            /**
             * Last error
             */
            error?: pulumi.Input<string>;
            /**
             * Errors
             */
            errors?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Pods FQDNs
             */
            fqdns?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Generation
             */
            generation?: pulumi.Input<number>;
            /**
             * Hosts count
             */
            hosts?: pulumi.Input<number>;
            /**
             * Added Hosts count
             */
            hostsAdded?: pulumi.Input<number>;
            /**
             * Completed Hosts count
             */
            hostsCompleted?: pulumi.Input<number>;
            /**
             * About to delete Hosts count
             */
            hostsDelete?: pulumi.Input<number>;
            /**
             * Deleted Hosts count
             */
            hostsDeleted?: pulumi.Input<number>;
            /**
             * Updated Hosts count
             */
            hostsUpdated?: pulumi.Input<number>;
            /**
             * List of hosts with tables created by the operator
             */
            hostsWithTablesCreated?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Normalized CHI requested
             */
            normalized?: pulumi.Input<{[key: string]: any}>;
            /**
             * Normalized CHI completed
             */
            normalizedCompleted?: pulumi.Input<{[key: string]: any}>;
            /**
             * Pod IPs
             */
            podIps?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Pods
             */
            pods?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Replicas count
             */
            replicas?: pulumi.Input<number>;
            /**
             * Shards count
             */
            shards?: pulumi.Input<number>;
            /**
             * Status
             */
            status?: pulumi.Input<string>;
            /**
             * Current task id
             */
            taskID?: pulumi.Input<string>;
            /**
             * Completed task ids
             */
            taskIDsCompleted?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Started task ids
             */
            taskIDsStarted?: pulumi.Input<pulumi.Input<string>[]>;
        }

    }
}

export namespace metallb {
    export namespace v1alpha1 {
        /**
         * AddressPoolSpec defines the desired state of AddressPool.
         */
        export interface AddressPoolSpecArgs {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: pulumi.Input<boolean>;
            /**
             * When an IP is allocated from this pool, how should it be translated into BGP announcements?
             */
            bgpAdvertisements?: pulumi.Input<pulumi.Input<inputs.metallb.v1alpha1.AddressPoolSpecBgpadvertisementsArgs>[]>;
            /**
             * Protocol can be used to select how the announcement is done.
             */
            protocol: pulumi.Input<string>;
        }
        /**
         * addressPoolSpecArgsProvideDefaults sets the appropriate defaults for AddressPoolSpecArgs
         */
        export function addressPoolSpecArgsProvideDefaults(val: AddressPoolSpecArgs): AddressPoolSpecArgs {
            return {
                ...val,
                autoAssign: (val.autoAssign) ?? true,
            };
        }

        export interface AddressPoolSpecBgpadvertisementsArgs {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.
             */
            aggregationLength?: pulumi.Input<number>;
            /**
             * Optional, defaults to 128 (i.e. no aggregation) if not specified.
             */
            aggregationLengthV6?: pulumi.Input<number>;
            /**
             * BGP communities
             */
            communities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: pulumi.Input<number>;
        }
        /**
         * addressPoolSpecBgpadvertisementsArgsProvideDefaults sets the appropriate defaults for AddressPoolSpecBgpadvertisementsArgs
         */
        export function addressPoolSpecBgpadvertisementsArgsProvideDefaults(val: AddressPoolSpecBgpadvertisementsArgs): AddressPoolSpecBgpadvertisementsArgs {
            return {
                ...val,
                aggregationLength: (val.aggregationLength) ?? 32,
                aggregationLengthV6: (val.aggregationLengthV6) ?? 128,
            };
        }

    }

    export namespace v1beta1 {
        /**
         * AddressPoolSpec defines the desired state of AddressPool.
         */
        export interface AddressPoolSpecArgs {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: pulumi.Input<boolean>;
            /**
             * Drives how an IP allocated from this pool should translated into BGP announcements.
             */
            bgpAdvertisements?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.AddressPoolSpecBgpadvertisementsArgs>[]>;
            /**
             * Protocol can be used to select how the announcement is done.
             */
            protocol: pulumi.Input<string>;
        }
        /**
         * addressPoolSpecArgsProvideDefaults sets the appropriate defaults for AddressPoolSpecArgs
         */
        export function addressPoolSpecArgsProvideDefaults(val: AddressPoolSpecArgs): AddressPoolSpecArgs {
            return {
                ...val,
                autoAssign: (val.autoAssign) ?? true,
            };
        }

        export interface AddressPoolSpecBgpadvertisementsArgs {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix.
             */
            aggregationLength?: pulumi.Input<number>;
            /**
             * Optional, defaults to 128 (i.e. no aggregation) if not specified.
             */
            aggregationLengthV6?: pulumi.Input<number>;
            /**
             * BGP communities to be associated with the given advertisement.
             */
            communities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: pulumi.Input<number>;
        }
        /**
         * addressPoolSpecBgpadvertisementsArgsProvideDefaults sets the appropriate defaults for AddressPoolSpecBgpadvertisementsArgs
         */
        export function addressPoolSpecBgpadvertisementsArgsProvideDefaults(val: AddressPoolSpecBgpadvertisementsArgs): AddressPoolSpecBgpadvertisementsArgs {
            return {
                ...val,
                aggregationLength: (val.aggregationLength) ?? 32,
                aggregationLengthV6: (val.aggregationLengthV6) ?? 128,
            };
        }

        /**
         * BFDProfileSpec defines the desired state of BFDProfile.
         */
        export interface BFDProfileSpecArgs {
            /**
             * Configures the detection multiplier to determine packet loss. The remote transmission interval will be multiplied by this value to determine the connection loss detection timer.
             */
            detectMultiplier?: pulumi.Input<number>;
            /**
             * Configures the minimal echo receive transmission interval that this system is capable of handling in milliseconds. Defaults to 50ms
             */
            echoInterval?: pulumi.Input<number>;
            /**
             * Enables or disables the echo transmission mode. This mode is disabled by default, and not supported on multi hops setups.
             */
            echoMode?: pulumi.Input<boolean>;
            /**
             * For multi hop sessions only: configure the minimum expected TTL for an incoming BFD control packet.
             */
            minimumTtl?: pulumi.Input<number>;
            /**
             * Mark session as passive: a passive session will not attempt to start the connection and will wait for control packets from peer before it begins replying.
             */
            passiveMode?: pulumi.Input<boolean>;
            /**
             * The minimum interval that this system is capable of receiving control packets in milliseconds. Defaults to 300ms.
             */
            receiveInterval?: pulumi.Input<number>;
            /**
             * The minimum transmission interval (less jitter) that this system wants to use to send BFD control packets in milliseconds. Defaults to 300ms
             */
            transmitInterval?: pulumi.Input<number>;
        }

        /**
         * BGPAdvertisementSpec defines the desired state of BGPAdvertisement.
         */
        export interface BGPAdvertisementSpecArgs {
            /**
             * The aggregation-length advertisement option lets you “roll up” the /32s into a larger prefix. Defaults to 32. Works for IPv4 addresses.
             */
            aggregationLength?: pulumi.Input<number>;
            /**
             * The aggregation-length advertisement option lets you “roll up” the /128s into a larger prefix. Defaults to 128. Works for IPv6 addresses.
             */
            aggregationLengthV6?: pulumi.Input<number>;
            /**
             * The BGP communities to be associated with the announcement. Each item can be a community of the form 1234:1234 or the name of an alias defined in the Community CRD.
             */
            communities?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecIpaddresspoolselectorsArgs>[]>;
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The BGP LOCAL_PREF attribute which is used by BGP best path algorithm, Path with higher localpref is preferred over one with lower localpref.
             */
            localPref?: pulumi.Input<number>;
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecNodeselectorsArgs>[]>;
            /**
             * Peers limits the bgppeer to advertise the ips of the selected pools to. When empty, the loadbalancer IP is announced to all the BGPPeers configured.
             */
            peers?: pulumi.Input<pulumi.Input<string>[]>;
        }
        /**
         * bgpadvertisementSpecArgsProvideDefaults sets the appropriate defaults for BGPAdvertisementSpecArgs
         */
        export function bgpadvertisementSpecArgsProvideDefaults(val: BGPAdvertisementSpecArgs): BGPAdvertisementSpecArgs {
            return {
                ...val,
                aggregationLength: (val.aggregationLength) ?? 32,
                aggregationLengthV6: (val.aggregationLengthV6) ?? 128,
            };
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPAdvertisementSpecIpaddresspoolselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecIpaddresspoolselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPAdvertisementSpecIpaddresspoolselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPAdvertisementSpecNodeselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPAdvertisementSpecNodeselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPAdvertisementSpecNodeselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpecArgs {
            bfdProfile?: pulumi.Input<string>;
            /**
             * EBGP peer is multi-hops away
             */
            ebgpMultiHop?: pulumi.Input<boolean>;
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime?: pulumi.Input<string>;
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime?: pulumi.Input<string>;
            /**
             * AS number to use for the local end of the session.
             */
            myASN: pulumi.Input<number>;
            /**
             * Only connect to this peer on nodes that match one of these selectors.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPPeerSpecNodeselectorsArgs>[]>;
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password?: pulumi.Input<string>;
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: pulumi.Input<number>;
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: pulumi.Input<string>;
            /**
             * Port to dial when establishing the session.
             */
            peerPort?: pulumi.Input<number>;
            /**
             * BGP router ID to advertise to the peer
             */
            routerID?: pulumi.Input<string>;
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress?: pulumi.Input<string>;
        }

        export interface BGPPeerSpecNodeselectorsArgs {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.BGPPeerSpecNodeselectorsMatchexpressionsArgs>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface BGPPeerSpecNodeselectorsMatchexpressionsArgs {
            key: pulumi.Input<string>;
            operator: pulumi.Input<string>;
            values: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * CommunitySpec defines the desired state of Community.
         */
        export interface CommunitySpecArgs {
            communities?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.CommunitySpecCommunitiesArgs>[]>;
        }

        export interface CommunitySpecCommunitiesArgs {
            /**
             * The name of the alias for the community.
             */
            name?: pulumi.Input<string>;
            /**
             * The BGP community value corresponding to the given name.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * IPAddressPoolSpec defines the desired state of IPAddressPool.
         */
        export interface IPAddressPoolSpecArgs {
            /**
             * A list of IP address ranges over which MetalLB has authority. You can list multiple ranges in a single pool, they will all share the same settings. Each range can be either a CIDR prefix, or an explicit start-end range of IPs.
             */
            addresses: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * AutoAssign flag used to prevent MetallB from automatic allocation for a pool.
             */
            autoAssign?: pulumi.Input<boolean>;
            /**
             * AvoidBuggyIPs prevents addresses ending with .0 and .255 to be used by a pool.
             */
            avoidBuggyIPs?: pulumi.Input<boolean>;
            /**
             * AllocateTo makes ip pool allocation to specific namespace and/or service. The controller will use the pool with lowest value of priority in case of multiple matches. A pool with no priority set will be used only if the pools with priority can't be used. If multiple matching IPAddressPools are available it will check for the availability of IPs sorting the matching IPAddressPools by priority, starting from the highest to the lowest. If multiple IPAddressPools have the same priority, choice will be random.
             */
            serviceAllocation?: pulumi.Input<inputs.metallb.v1beta1.IPAddressPoolSpecServiceallocationArgs>;
        }
        /**
         * ipaddressPoolSpecArgsProvideDefaults sets the appropriate defaults for IPAddressPoolSpecArgs
         */
        export function ipaddressPoolSpecArgsProvideDefaults(val: IPAddressPoolSpecArgs): IPAddressPoolSpecArgs {
            return {
                ...val,
                autoAssign: (val.autoAssign) ?? true,
                avoidBuggyIPs: (val.avoidBuggyIPs) ?? false,
            };
        }

        /**
         * AllocateTo makes ip pool allocation to specific namespace and/or service. The controller will use the pool with lowest value of priority in case of multiple matches. A pool with no priority set will be used only if the pools with priority can't be used. If multiple matching IPAddressPools are available it will check for the availability of IPs sorting the matching IPAddressPools by priority, starting from the highest to the lowest. If multiple IPAddressPools have the same priority, choice will be random.
         */
        export interface IPAddressPoolSpecServiceallocationArgs {
            /**
             * NamespaceSelectors list of label selectors to select namespace(s) for ip pool, an alternative to using namespace list.
             */
            namespaceSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.IPAddressPoolSpecServiceallocationNamespaceselectorsArgs>[]>;
            /**
             * Namespaces list of namespace(s) on which ip pool can be attached.
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Priority priority given for ip pool while ip allocation on a service.
             */
            priority?: pulumi.Input<number>;
            /**
             * ServiceSelectors list of label selector to select service(s) for which ip pool can be used for ip allocation.
             */
            serviceSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.IPAddressPoolSpecServiceallocationServiceselectorsArgs>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface IPAddressPoolSpecServiceallocationNamespaceselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.IPAddressPoolSpecServiceallocationNamespaceselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IPAddressPoolSpecServiceallocationNamespaceselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface IPAddressPoolSpecServiceallocationServiceselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.IPAddressPoolSpecServiceallocationServiceselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface IPAddressPoolSpecServiceallocationServiceselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * L2AdvertisementSpec defines the desired state of L2Advertisement.
         */
        export interface L2AdvertisementSpecArgs {
            /**
             * A list of interfaces to announce from. The LB IP will be announced only from these interfaces. If the field is not set, we advertise from all the interfaces on the host.
             */
            interfaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * A selector for the IPAddressPools which would get advertised via this advertisement. If no IPAddressPool is selected by this or by the list, the advertisement is applied to all the IPAddressPools.
             */
            ipAddressPoolSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecIpaddresspoolselectorsArgs>[]>;
            /**
             * The list of IPAddressPools to advertise via this advertisement, selected by name.
             */
            ipAddressPools?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * NodeSelectors allows to limit the nodes to announce as next hops for the LoadBalancer IP. When empty, all the nodes having  are announced as next hops.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecNodeselectorsArgs>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface L2AdvertisementSpecIpaddresspoolselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecIpaddresspoolselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface L2AdvertisementSpecIpaddresspoolselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface L2AdvertisementSpecNodeselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta1.L2AdvertisementSpecNodeselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface L2AdvertisementSpecNodeselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

    }

    export namespace v1beta2 {
        /**
         * BGPPeerSpec defines the desired state of Peer.
         */
        export interface BGPPeerSpecArgs {
            /**
             * The name of the BFD Profile to be used for the BFD session associated to the BGP session. If not set, the BFD session won't be set up.
             */
            bfdProfile?: pulumi.Input<string>;
            /**
             * To set if the BGPPeer is multi-hops away. Needed for FRR mode only.
             */
            ebgpMultiHop?: pulumi.Input<boolean>;
            /**
             * Requested BGP hold time, per RFC4271.
             */
            holdTime?: pulumi.Input<string>;
            /**
             * Requested BGP keepalive time, per RFC4271.
             */
            keepaliveTime?: pulumi.Input<string>;
            /**
             * AS number to use for the local end of the session.
             */
            myASN: pulumi.Input<number>;
            /**
             * Only connect to this peer on nodes that match one of these selectors.
             */
            nodeSelectors?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta2.BGPPeerSpecNodeselectorsArgs>[]>;
            /**
             * Authentication password for routers enforcing TCP MD5 authenticated sessions
             */
            password?: pulumi.Input<string>;
            /**
             * passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
             */
            passwordSecret?: pulumi.Input<inputs.metallb.v1beta2.BGPPeerSpecPasswordsecretArgs>;
            /**
             * AS number to expect from the remote end of the session.
             */
            peerASN: pulumi.Input<number>;
            /**
             * Address to dial when establishing the session.
             */
            peerAddress: pulumi.Input<string>;
            /**
             * Port to dial when establishing the session.
             */
            peerPort?: pulumi.Input<number>;
            /**
             * BGP router ID to advertise to the peer
             */
            routerID?: pulumi.Input<string>;
            /**
             * Source address to use when establishing the session.
             */
            sourceAddress?: pulumi.Input<string>;
            /**
             * To set if we want to peer with the BGPPeer using an interface belonging to a host vrf
             */
            vrf?: pulumi.Input<string>;
        }
        /**
         * bgppeerSpecArgsProvideDefaults sets the appropriate defaults for BGPPeerSpecArgs
         */
        export function bgppeerSpecArgsProvideDefaults(val: BGPPeerSpecArgs): BGPPeerSpecArgs {
            return {
                ...val,
                peerPort: (val.peerPort) ?? 179,
            };
        }

        /**
         * A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
         */
        export interface BGPPeerSpecNodeselectorsArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.metallb.v1beta2.BGPPeerSpecNodeselectorsMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface BGPPeerSpecNodeselectorsMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * passwordSecret is name of the authentication secret for BGP Peer. the secret must be of type "kubernetes.io/basic-auth", and created in the same namespace as the MetalLB deployment. The password is stored in the secret as the key "password".
         */
        export interface BGPPeerSpecPasswordsecretArgs {
            /**
             * Name is unique within a namespace to reference a secret resource.
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which the secret name must be unique.
             */
            namespace?: pulumi.Input<string>;
        }

    }
}

export namespace monitoring {
    export namespace v1 {
        /**
         * Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface AlertmanagerSpecArgs {
            /**
             * AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.
             */
            additionalPeers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * If specified, the pod's scheduling constraints.
             */
            affinity?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityArgs>;
            /**
             * Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace.
             */
            alertmanagerConfigNamespaceSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfignamespaceselectorArgs>;
            /**
             * AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
             */
            alertmanagerConfigSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigselectorArgs>;
            /**
             * EXPERIMENTAL: alertmanagerConfiguration specifies the configuration of Alertmanager. If defined, it takes precedence over the `configSecret` field. This field may change in future releases.
             */
            alertmanagerConfiguration?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationArgs>;
            /**
             * Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead
             */
            baseImage?: pulumi.Input<string>;
            /**
             * ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918
             */
            clusterAdvertiseAddress?: pulumi.Input<string>;
            /**
             * Interval between gossip attempts.
             */
            clusterGossipInterval?: pulumi.Input<string>;
            /**
             * Timeout for cluster peering.
             */
            clusterPeerTimeout?: pulumi.Input<string>;
            /**
             * Interval between pushpull attempts.
             */
            clusterPushpullInterval?: pulumi.Input<string>;
            /**
             * ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The ConfigMaps are mounted into /etc/alertmanager/configmaps/<configmap-name>.
             */
            configMaps?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains the configuration for this Alertmanager instance. If empty, it defaults to 'alertmanager-<alertmanager-name>'. 
             *  The Alertmanager configuration should be available under the `alertmanager.yaml` key. Additional keys from the original secret are copied to the generated secret. 
             *  If either the secret or the `alertmanager.yaml` key is missing, the operator provisions an Alertmanager configuration with one empty receiver (effectively dropping alert notifications).
             */
            configSecret?: pulumi.Input<string>;
            /**
             * Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            containers?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersArgs>[]>;
            /**
             * The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.
             */
            externalUrl?: pulumi.Input<string>;
            /**
             * ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.
             */
            forceEnableClusterMode?: pulumi.Input<boolean>;
            /**
             * Pods' hostAliases configuration
             */
            hostAliases?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecHostaliasesArgs>[]>;
            /**
             * Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.
             */
            image?: pulumi.Input<string>;
            /**
             * An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
             */
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecImagepullsecretsArgs>[]>;
            /**
             * InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.
             */
            initContainers?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersArgs>[]>;
            /**
             * ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.
             */
            listenLocal?: pulumi.Input<boolean>;
            /**
             * Log format for Alertmanager to be configured with.
             */
            logFormat?: pulumi.Input<string>;
            /**
             * Log level for Alertmanager to be configured with.
             */
            logLevel?: pulumi.Input<string>;
            /**
             * Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate.
             */
            minReadySeconds?: pulumi.Input<number>;
            /**
             * Define which Nodes the Pods are scheduled on.
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.
             */
            paused?: pulumi.Input<boolean>;
            /**
             * PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
             */
            podMetadata?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecPodmetadataArgs>;
            /**
             * Port name used for the pods and governing service. This defaults to web
             */
            portName?: pulumi.Input<string>;
            /**
             * Priority class assigned to the Pods
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Define resources requests and limits for single Pods.
             */
            resources?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecResourcesArgs>;
            /**
             * Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).
             */
            retention?: pulumi.Input<string>;
            /**
             * The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.
             */
            routePrefix?: pulumi.Input<string>;
            /**
             * Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. The Secrets are mounted into /etc/alertmanager/secrets/<secret-name>.
             */
            secrets?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
             */
            securityContext?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecSecuritycontextArgs>;
            /**
             * ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.
             */
            serviceAccountName?: pulumi.Input<string>;
            /**
             * SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.
             */
            sha?: pulumi.Input<string>;
            /**
             * Storage is the definition of how storage will be used by the Alertmanager instances.
             */
            storage?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageArgs>;
            /**
             * Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.
             */
            tag?: pulumi.Input<string>;
            /**
             * If specified, the pod's tolerations.
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecTolerationsArgs>[]>;
            /**
             * If specified, the pod's topology spread constraints.
             */
            topologySpreadConstraints?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecTopologyspreadconstraintsArgs>[]>;
            /**
             * Version the cluster should be on.
             */
            version?: pulumi.Input<string>;
            /**
             * VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumemountsArgs>[]>;
            /**
             * Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesArgs>[]>;
            /**
             * Defines the web command line flags when starting Alertmanager.
             */
            web?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebArgs>;
        }
        /**
         * alertmanagerSpecArgsProvideDefaults sets the appropriate defaults for AlertmanagerSpecArgs
         */
        export function alertmanagerSpecArgsProvideDefaults(val: AlertmanagerSpecArgs): AlertmanagerSpecArgs {
            return {
                ...val,
                retention: (val.retention) ?? "120h",
            };
        }

        /**
         * If specified, the pod's scheduling constraints.
         */
        export interface AlertmanagerSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface AlertmanagerSpecAffinityPodaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace.
         */
        export interface AlertmanagerSpecAlertmanagerconfignamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfignamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAlertmanagerconfignamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * AlertmanagerConfigs to be selected for to merge and configure Alertmanager with.
         */
        export interface AlertmanagerSpecAlertmanagerconfigselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecAlertmanagerconfigselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * EXPERIMENTAL: alertmanagerConfiguration specifies the configuration of Alertmanager. If defined, it takes precedence over the `configSecret` field. This field may change in future releases.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationArgs {
            /**
             * Defines the global parameters of the Alertmanager configuration.
             */
            global?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalArgs>;
            /**
             * The name of the AlertmanagerConfig resource which is used to generate the Alertmanager configuration. It must be defined in the same namespace as the Alertmanager object. The operator will not enforce a `namespace` label for routes and inhibition rules.
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Defines the global parameters of the Alertmanager configuration.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalArgs {
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigArgs>;
            /**
             * ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.
             */
            resolveTimeout?: pulumi.Input<string>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the Alertmanager object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the Alertmanager object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerSpecAlertmanagerconfigurationGlobalHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface AlertmanagerSpecContainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvfromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersVolumedevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersVolumemountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface AlertmanagerSpecContainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface AlertmanagerSpecContainersEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface AlertmanagerSpecContainersEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface AlertmanagerSpecContainersEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface AlertmanagerSpecContainersEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface AlertmanagerSpecContainersEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface AlertmanagerSpecContainersEnvfromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvfromConfigmaprefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersEnvfromSecretrefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface AlertmanagerSpecContainersEnvfromConfigmaprefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface AlertmanagerSpecContainersEnvfromSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface AlertmanagerSpecContainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartHttpgetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartTcpsocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePoststartHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecContainersLifecyclePoststartTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopHttpgetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopTcpsocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLifecyclePrestopHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecContainersLifecyclePrestopTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecContainersLivenessprobeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeHttpgetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeTcpsocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersLivenessprobeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecContainersLivenessprobeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersLivenessprobeHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersLivenessprobeHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersLivenessprobeHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecContainersLivenessprobeTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface AlertmanagerSpecContainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * alertmanagerSpecContainersPortsArgsProvideDefaults sets the appropriate defaults for AlertmanagerSpecContainersPortsArgs
         */
        export function alertmanagerSpecContainersPortsArgsProvideDefaults(val: AlertmanagerSpecContainersPortsArgs): AlertmanagerSpecContainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecContainersReadinessprobeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeHttpgetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeTcpsocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersReadinessprobeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecContainersReadinessprobeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersReadinessprobeHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersReadinessprobeHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersReadinessprobeHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecContainersReadinessprobeTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface AlertmanagerSpecContainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface AlertmanagerSpecContainersSecuritycontextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextSelinuxoptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextSeccompprofileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersSecuritycontextWindowsoptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecContainersSecuritycontextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecContainersSecuritycontextSeccompprofileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecContainersSecuritycontextSelinuxoptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface AlertmanagerSpecContainersSecuritycontextWindowsoptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecContainersStartupprobeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeHttpgetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeTcpsocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecContainersStartupprobeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecContainersStartupprobeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecContainersStartupprobeHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecContainersStartupprobeHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecContainersStartupprobeHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecContainersStartupprobeTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface AlertmanagerSpecContainersVolumedevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface AlertmanagerSpecContainersVolumemountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
         */
        export interface AlertmanagerSpecHostaliasesArgs {
            /**
             * Hostnames for the above IP address.
             */
            hostnames: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * IP address of the host file entry.
             */
            ip: pulumi.Input<string>;
        }

        /**
         * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
         */
        export interface AlertmanagerSpecImagepullsecretsArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * A single application container that you want to run within a pod.
         */
        export interface AlertmanagerSpecInitcontainersArgs {
            /**
             * Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            args?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * List of environment variables to set in the container. Cannot be updated.
             */
            env?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvArgs>[]>;
            /**
             * List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvfromArgs>[]>;
            /**
             * Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
             */
            image?: pulumi.Input<string>;
            /**
             * Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecycleArgs>;
            /**
             * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            livenessProbe?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeArgs>;
            /**
             * Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
             */
            name: pulumi.Input<string>;
            /**
             * List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersPortsArgs>[]>;
            /**
             * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            readinessProbe?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeArgs>;
            /**
             * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            resources?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersResourcesArgs>;
            /**
             * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
             */
            securityContext?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextArgs>;
            /**
             * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            startupProbe?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeArgs>;
            /**
             * Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
             */
            stdin?: pulumi.Input<boolean>;
            /**
             * Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
             */
            stdinOnce?: pulumi.Input<boolean>;
            /**
             * Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
             */
            terminationMessagePath?: pulumi.Input<string>;
            /**
             * Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
             */
            terminationMessagePolicy?: pulumi.Input<string>;
            /**
             * Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
             */
            tty?: pulumi.Input<boolean>;
            /**
             * volumeDevices is the list of block devices to be used by the container.
             */
            volumeDevices?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersVolumedevicesArgs>[]>;
            /**
             * Pod volumes to mount into the container's filesystem. Cannot be updated.
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersVolumemountsArgs>[]>;
            /**
             * Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
             */
            workingDir?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface AlertmanagerSpecInitcontainersEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface AlertmanagerSpecInitcontainersEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface AlertmanagerSpecInitcontainersEnvfromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvfromConfigmaprefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersEnvfromSecretrefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface AlertmanagerSpecInitcontainersEnvfromConfigmaprefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface AlertmanagerSpecInitcontainersEnvfromSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface AlertmanagerSpecInitcontainersLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartHttpgetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartTcpsocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePoststartHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePoststartTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopHttpgetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopTcpsocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLifecyclePrestopHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface AlertmanagerSpecInitcontainersLifecyclePrestopTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeHttpgetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeTcpsocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersLivenessprobeHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecInitcontainersLivenessprobeTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * ContainerPort represents a network port in a single container.
         */
        export interface AlertmanagerSpecInitcontainersPortsArgs {
            /**
             * Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
             */
            containerPort: pulumi.Input<number>;
            /**
             * What host IP to bind the external port to.
             */
            hostIP?: pulumi.Input<string>;
            /**
             * Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
             */
            hostPort?: pulumi.Input<number>;
            /**
             * If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
             */
            name?: pulumi.Input<string>;
            /**
             * Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
             */
            protocol?: pulumi.Input<string>;
        }
        /**
         * alertmanagerSpecInitcontainersPortsArgsProvideDefaults sets the appropriate defaults for AlertmanagerSpecInitcontainersPortsArgs
         */
        export function alertmanagerSpecInitcontainersPortsArgsProvideDefaults(val: AlertmanagerSpecInitcontainersPortsArgs): AlertmanagerSpecInitcontainersPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeHttpgetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeTcpsocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersReadinessprobeHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecInitcontainersReadinessprobeTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
         */
        export interface AlertmanagerSpecInitcontainersResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextSelinuxoptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextSeccompprofileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersSecuritycontextWindowsoptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextSeccompprofileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextSelinuxoptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface AlertmanagerSpecInitcontainersSecuritycontextWindowsoptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeExecArgs>;
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
             */
            grpc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeGrpcArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeHttpgetArgs>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * TCPSocket specifies an action involving a TCP port.
             */
            tcpSocket?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeTcpsocketArgs>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeGrpcArgs {
            /**
             * Port number of the gRPC service. Number must be in the range 1 to 65535.
             */
            port: pulumi.Input<number>;
            /**
             * Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). 
             *  If this is not specified, the default behavior is defined by gRPC.
             */
            service?: pulumi.Input<string>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecInitcontainersStartupprobeHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * TCPSocket specifies an action involving a TCP port.
         */
        export interface AlertmanagerSpecInitcontainersStartupprobeTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * volumeDevice describes a mapping of a raw block device within a container.
         */
        export interface AlertmanagerSpecInitcontainersVolumedevicesArgs {
            /**
             * devicePath is the path inside of the container that the device will be mapped to.
             */
            devicePath: pulumi.Input<string>;
            /**
             * name must match the name of a persistentVolumeClaim in the pod
             */
            name: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface AlertmanagerSpecInitcontainersVolumemountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.
         */
        export interface AlertmanagerSpecPodmetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Define resources requests and limits for single Pods.
         */
        export interface AlertmanagerSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.
         */
        export interface AlertmanagerSpecSecuritycontextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecSecuritycontextSelinuxoptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecSecuritycontextSeccompprofileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecSecuritycontextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecSecuritycontextWindowsoptionsArgs>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecSecuritycontextSeccompprofileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface AlertmanagerSpecSecuritycontextSelinuxoptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface AlertmanagerSpecSecuritycontextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface AlertmanagerSpecSecuritycontextWindowsoptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * Storage is the definition of how storage will be used by the Alertmanager instances.
         */
        export interface AlertmanagerSpecStorageArgs {
            /**
             * Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.
             */
            disableMountSubPath?: pulumi.Input<boolean>;
            /**
             * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
             */
            emptyDir?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEmptydirArgs>;
            /**
             * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
             */
            ephemeral?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralArgs>;
            /**
             * A PVC spec to be used by the Prometheus StatefulSets.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateArgs>;
        }

        /**
         * EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
         */
        export interface AlertmanagerSpecStorageEmptydirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * EphemeralVolumeSource to be used by the Prometheus StatefulSets. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
         */
        export interface AlertmanagerSpecStorageEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecArgs>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourcerefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecDatasourcerefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecStorageEphemeralVolumeclaimtemplateSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A PVC spec to be used by the Prometheus StatefulSets.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateArgs {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
             */
            metadata?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateMetadataArgs>;
            /**
             * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecArgs>;
            /**
             * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateStatusArgs>;
        }

        /**
         * EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateMetadataArgs {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
             */
            name?: pulumi.Input<string>;
        }

        /**
         * Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasourcerefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecDatasourcerefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateStatusArgs {
            /**
             * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * capacity represents the actual resources of the underlying volume.
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecStorageVolumeclaimtemplateStatusConditionsArgs>[]>;
            /**
             * phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: pulumi.Input<string>;
            /**
             * resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface AlertmanagerSpecStorageVolumeclaimtemplateStatusConditionsArgs {
            /**
             * lastProbeTime is the time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * lastTransitionTime is the time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is the human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: pulumi.Input<string>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface AlertmanagerSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * TopologySpreadConstraint specifies how to spread matching pods among the given topology.
         */
        export interface AlertmanagerSpecTopologyspreadconstraintsArgs {
            /**
             * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
             */
            labelSelector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecTopologyspreadconstraintsLabelselectorArgs>;
            /**
             * MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.
             */
            matchLabelKeys?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
             */
            maxSkew: pulumi.Input<number>;
            /**
             * MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule. 
             *  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew. 
             *  This is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).
             */
            minDomains?: pulumi.Input<number>;
            /**
             * NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations. 
             *  If this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeAffinityPolicy?: pulumi.Input<string>;
            /**
             * NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included. 
             *  If this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
             */
            nodeTaintsPolicy?: pulumi.Input<string>;
            /**
             * TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology. And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology. It's a required field.
             */
            topologyKey: pulumi.Input<string>;
            /**
             * WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location, but giving higher precedence to topologies that would help reduce the skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assignment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
             */
            whenUnsatisfiable: pulumi.Input<string>;
        }

        /**
         * LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
         */
        export interface AlertmanagerSpecTopologyspreadconstraintsLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecTopologyspreadconstraintsLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecTopologyspreadconstraintsLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface AlertmanagerSpecVolumemountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface AlertmanagerSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesAwselasticblockstoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesAzurediskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesAzurefileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesConfigmapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEmptydirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesFlexvolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesGcepersistentdiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesGitrepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesHostpathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesPersistentvolumeclaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesPhotonpersistentdiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesPortworxvolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesScaleioArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesVspherevolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface AlertmanagerSpecVolumesAwselasticblockstoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface AlertmanagerSpecVolumesAzurediskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface AlertmanagerSpecVolumesAzurefileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface AlertmanagerSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesCephfsSecretrefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface AlertmanagerSpecVolumesCephfsSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface AlertmanagerSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesCinderSecretrefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface AlertmanagerSpecVolumesCinderSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface AlertmanagerSpecVolumesConfigmapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesConfigmapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesConfigmapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface AlertmanagerSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesCsiNodepublishsecretrefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface AlertmanagerSpecVolumesCsiNodepublishsecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface AlertmanagerSpecVolumesDownwardapiArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface AlertmanagerSpecVolumesDownwardapiItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiItemsFieldrefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesDownwardapiItemsResourcefieldrefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface AlertmanagerSpecVolumesDownwardapiItemsFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface AlertmanagerSpecVolumesDownwardapiItemsResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface AlertmanagerSpecVolumesEmptydirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface AlertmanagerSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<{[key: string]: any}>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecArgs>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
             */
            dataSource?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourcerefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourcerefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecResourcesArgs {
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface AlertmanagerSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface AlertmanagerSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface AlertmanagerSpecVolumesFlexvolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesFlexvolumeSecretrefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface AlertmanagerSpecVolumesFlexvolumeSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface AlertmanagerSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface AlertmanagerSpecVolumesGcepersistentdiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface AlertmanagerSpecVolumesGitrepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface AlertmanagerSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface AlertmanagerSpecVolumesHostpathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface AlertmanagerSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesIscsiSecretrefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface AlertmanagerSpecVolumesIscsiSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface AlertmanagerSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface AlertmanagerSpecVolumesPersistentvolumeclaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface AlertmanagerSpecVolumesPhotonpersistentdiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface AlertmanagerSpecVolumesPortworxvolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface AlertmanagerSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesConfigmapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesServiceaccounttokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesConfigmapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesConfigmapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesConfigmapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsFieldrefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldrefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface AlertmanagerSpecVolumesProjectedSourcesServiceaccounttokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface AlertmanagerSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface AlertmanagerSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesRbdSecretrefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface AlertmanagerSpecVolumesRbdSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface AlertmanagerSpecVolumesScaleioArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesScaleioSecretrefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface AlertmanagerSpecVolumesScaleioSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface AlertmanagerSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface AlertmanagerSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface AlertmanagerSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecVolumesStorageosSecretrefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface AlertmanagerSpecVolumesStorageosSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface AlertmanagerSpecVolumesVspherevolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * Defines the web command line flags when starting Alertmanager.
         */
        export interface AlertmanagerSpecWebArgs {
            /**
             * Defines HTTP parameters for web server.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebHttpconfigArgs>;
            /**
             * Defines the TLS parameters for HTTPS.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigArgs>;
        }

        /**
         * Defines HTTP parameters for web server.
         */
        export interface AlertmanagerSpecWebHttpconfigArgs {
            /**
             * List of headers that can be added to HTTP responses.
             */
            headers?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebHttpconfigHeadersArgs>;
            /**
             * Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS. When TLSConfig is not configured, HTTP/2 will be disabled. Whenever the value of the field changes, a rolling update will be triggered.
             */
            http2?: pulumi.Input<boolean>;
        }

        /**
         * List of headers that can be added to HTTP responses.
         */
        export interface AlertmanagerSpecWebHttpconfigHeadersArgs {
            /**
             * Set the Content-Security-Policy header to HTTP responses. Unset if blank.
             */
            contentSecurityPolicy?: pulumi.Input<string>;
            /**
             * Set the Strict-Transport-Security header to HTTP responses. Unset if blank. Please make sure that you use this with care as this header might force browsers to load Prometheus and the other applications hosted on the same domain and subdomains over HTTPS. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
             */
            strictTransportSecurity?: pulumi.Input<string>;
            /**
             * Set the X-Content-Type-Options header to HTTP responses. Unset if blank. Accepted value is nosniff. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
             */
            xContentTypeOptions?: pulumi.Input<string>;
            /**
             * Set the X-Frame-Options header to HTTP responses. Unset if blank. Accepted values are deny and sameorigin. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
             */
            xFrameOptions?: pulumi.Input<string>;
            /**
             * Set the X-XSS-Protection header to all responses. Unset if blank. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
             */
            xXSSProtection?: pulumi.Input<string>;
        }

        /**
         * Defines the TLS parameters for HTTPS.
         */
        export interface AlertmanagerSpecWebTlsconfigArgs {
            /**
             * Contains the TLS certificate for the server.
             */
            cert: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigCertArgs>;
            /**
             * List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
             */
            cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType
             */
            clientAuthType?: pulumi.Input<string>;
            /**
             * Contains the CA certificate for client certificate authentication to the server.
             */
            client_ca?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigClient_caArgs>;
            /**
             * Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID
             */
            curvePreferences?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Secret containing the TLS key for the server.
             */
            keySecret: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigKeysecretArgs>;
            /**
             * Maximum TLS version that is acceptable. Defaults to TLS13.
             */
            maxVersion?: pulumi.Input<string>;
            /**
             * Minimum TLS version that is acceptable. Defaults to TLS12.
             */
            minVersion?: pulumi.Input<string>;
            /**
             * Controls whether the server selects the client's most preferred cipher suite, or the server's most preferred cipher suite. If true then the server's preference, as expressed in the order of elements in cipherSuites, is used.
             */
            preferServerCipherSuites?: pulumi.Input<boolean>;
        }

        /**
         * Contains the TLS certificate for the server.
         */
        export interface AlertmanagerSpecWebTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerSpecWebTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerSpecWebTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Contains the CA certificate for client certificate authentication to the server.
         */
        export interface AlertmanagerSpecWebTlsconfigClient_caArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigClient_caConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.AlertmanagerSpecWebTlsconfigClient_caSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerSpecWebTlsconfigClient_caConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerSpecWebTlsconfigClient_caSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the TLS key for the server.
         */
        export interface AlertmanagerSpecWebTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Most recent observed status of the Alertmanager cluster. Read-only. Not included when requesting from the apiserver, only from the Prometheus Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
         */
        export interface AlertmanagerStatusArgs {
            /**
             * Total number of available pods (ready for at least minReadySeconds) targeted by this Alertmanager cluster.
             */
            availableReplicas: pulumi.Input<number>;
            /**
             * Represents whether any actions on the underlying managed objects are being performed. Only delete actions will be performed.
             */
            paused: pulumi.Input<boolean>;
            /**
             * Total number of non-terminated pods targeted by this Alertmanager cluster (their labels match the selector).
             */
            replicas: pulumi.Input<number>;
            /**
             * Total number of unavailable pods targeted by this Alertmanager cluster.
             */
            unavailableReplicas: pulumi.Input<number>;
            /**
             * Total number of non-terminated pods targeted by this Alertmanager cluster that have the desired version spec.
             */
            updatedReplicas: pulumi.Input<number>;
        }

        /**
         * Specification of desired Pod selection for target discovery by Prometheus.
         */
        export interface PodMonitorSpecArgs {
            /**
             * Attaches node metadata to discovered targets. Only valid for role: pod. Only valid in Prometheus versions 2.35.0 and newer.
             */
            attachMetadata?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecAttachmetadataArgs>;
            /**
             * The label to use to retrieve the job name from.
             */
            jobLabel?: pulumi.Input<string>;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelLimit?: pulumi.Input<number>;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelNameLengthLimit?: pulumi.Input<number>;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelValueLengthLimit?: pulumi.Input<number>;
            /**
             * Selector to select which namespaces the Endpoints objects are discovered from.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecNamespaceselectorArgs>;
            /**
             * A list of endpoints allowed as part of this PodMonitor.
             */
            podMetricsEndpoints: pulumi.Input<pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsArgs>[]>;
            /**
             * PodTargetLabels transfers labels on the Kubernetes Pod onto the target.
             */
            podTargetLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
             */
            sampleLimit?: pulumi.Input<number>;
            /**
             * Selector to select Pod objects.
             */
            selector: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecSelectorArgs>;
            /**
             * TargetLimit defines a limit on the number of scraped targets that will be accepted.
             */
            targetLimit?: pulumi.Input<number>;
        }

        /**
         * Attaches node metadata to discovered targets. Only valid for role: pod. Only valid in Prometheus versions 2.35.0 and newer.
         */
        export interface PodMonitorSpecAttachmetadataArgs {
            /**
             * When set to true, Prometheus must have permissions to get Nodes.
             */
            node?: pulumi.Input<boolean>;
        }

        /**
         * Selector to select which namespaces the Endpoints objects are discovered from.
         */
        export interface PodMonitorSpecNamespaceselectorArgs {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: pulumi.Input<boolean>;
            /**
             * List of namespace names to select from.
             */
            matchNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.
         */
        export interface PodMonitorSpecPodmetricsendpointsArgs {
            /**
             * Authorization section for this endpoint
             */
            authorization?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsAuthorizationArgs>;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBasicauthArgs>;
            /**
             * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBearertokensecretArgs>;
            /**
             * Whether to enable HTTP2.
             */
            enableHttp2?: pulumi.Input<boolean>;
            /**
             * FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * HonorLabels chooses the metric's labels on collisions with target labels.
             */
            honorLabels?: pulumi.Input<boolean>;
            /**
             * HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
             */
            honorTimestamps?: pulumi.Input<boolean>;
            /**
             * Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.
             */
            interval?: pulumi.Input<string>;
            /**
             * MetricRelabelConfigs to apply to samples before ingestion.
             */
            metricRelabelings?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsMetricrelabelingsArgs>[]>;
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2Args>;
            /**
             * Optional HTTP URL parameters
             */
            params?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. `/metrics`).
             */
            path?: pulumi.Input<string>;
            /**
             * Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.
             */
            port?: pulumi.Input<string>;
            /**
             * ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
             */
            proxyUrl?: pulumi.Input<string>;
            /**
             * RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelings?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsRelabelingsArgs>[]>;
            /**
             * HTTP scheme to use for scraping.
             */
            scheme?: pulumi.Input<string>;
            /**
             * Timeout after which the scrape is ended If not specified, the Prometheus global scrape interval is used.
             */
            scrapeTimeout?: pulumi.Input<string>;
            /**
             * Deprecated: Use 'port' instead.
             */
            targetPort?: pulumi.Input<number | string>;
            /**
             * TLS configuration to use when scraping the endpoint.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigArgs>;
        }

        /**
         * Authorization section for this endpoint
         */
        export interface PodMonitorSpecPodmetricsendpointsAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface PodMonitorSpecPodmetricsendpointsAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
         */
        export interface PodMonitorSpecPodmetricsendpointsBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface PodMonitorSpecPodmetricsendpointsBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface PodMonitorSpecPodmetricsendpointsBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator.
         */
        export interface PodMonitorSpecPodmetricsendpointsBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface PodMonitorSpecPodmetricsendpointsMetricrelabelingsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * podMonitorSpecPodmetricsendpointsMetricrelabelingsArgsProvideDefaults sets the appropriate defaults for PodMonitorSpecPodmetricsendpointsMetricrelabelingsArgs
         */
        export function podMonitorSpecPodmetricsendpointsMetricrelabelingsArgsProvideDefaults(val: PodMonitorSpecPodmetricsendpointsMetricrelabelingsArgs): PodMonitorSpecPodmetricsendpointsMetricrelabelingsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface PodMonitorSpecPodmetricsendpointsOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface PodMonitorSpecPodmetricsendpointsRelabelingsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * podMonitorSpecPodmetricsendpointsRelabelingsArgsProvideDefaults sets the appropriate defaults for PodMonitorSpecPodmetricsendpointsRelabelingsArgs
         */
        export function podMonitorSpecPodmetricsendpointsRelabelingsArgsProvideDefaults(val: PodMonitorSpecPodmetricsendpointsRelabelingsArgs): PodMonitorSpecPodmetricsendpointsRelabelingsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * TLS configuration to use when scraping the endpoint.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.PodMonitorSpecPodmetricsendpointsTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface PodMonitorSpecPodmetricsendpointsTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selector to select Pod objects.
         */
        export interface PodMonitorSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.PodMonitorSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface PodMonitorSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Specification of desired Ingress selection for target discovery by Prometheus.
         */
        export interface ProbeSpecArgs {
            /**
             * Authorization section for this endpoint
             */
            authorization?: pulumi.Input<inputs.monitoring.v1.ProbeSpecAuthorizationArgs>;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1.ProbeSpecBasicauthArgs>;
            /**
             * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1.ProbeSpecBearertokensecretArgs>;
            /**
             * Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.
             */
            interval?: pulumi.Input<string>;
            /**
             * The job name assigned to scraped metrics by default.
             */
            jobName?: pulumi.Input<string>;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelLimit?: pulumi.Input<number>;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelNameLengthLimit?: pulumi.Input<number>;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelValueLengthLimit?: pulumi.Input<number>;
            /**
             * MetricRelabelConfigs to apply to samples before ingestion.
             */
            metricRelabelings?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ProbeSpecMetricrelabelingsArgs>[]>;
            /**
             * The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml
             */
            module?: pulumi.Input<string>;
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1.ProbeSpecOauth2Args>;
            /**
             * Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.
             */
            prober?: pulumi.Input<inputs.monitoring.v1.ProbeSpecProberArgs>;
            /**
             * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
             */
            sampleLimit?: pulumi.Input<number>;
            /**
             * Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.
             */
            scrapeTimeout?: pulumi.Input<string>;
            /**
             * TargetLimit defines a limit on the number of scraped targets that will be accepted.
             */
            targetLimit?: pulumi.Input<number>;
            /**
             * Targets defines a set of static or dynamically discovered targets to probe.
             */
            targets?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsArgs>;
            /**
             * TLS configuration to use when scraping the endpoint.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigArgs>;
        }
        /**
         * probeSpecArgsProvideDefaults sets the appropriate defaults for ProbeSpecArgs
         */
        export function probeSpecArgsProvideDefaults(val: ProbeSpecArgs): ProbeSpecArgs {
            return {
                ...val,
                prober: (val.prober ? pulumi.output(val.prober).apply(inputs.monitoring.v1.probeSpecProberArgsProvideDefaults) : undefined),
            };
        }

        /**
         * Authorization section for this endpoint
         */
        export interface ProbeSpecAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1.ProbeSpecAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface ProbeSpecAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint
         */
        export interface ProbeSpecBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1.ProbeSpecBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1.ProbeSpecBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface ProbeSpecBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface ProbeSpecBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator.
         */
        export interface ProbeSpecBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ProbeSpecMetricrelabelingsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * probeSpecMetricrelabelingsArgsProvideDefaults sets the appropriate defaults for ProbeSpecMetricrelabelingsArgs
         */
        export function probeSpecMetricrelabelingsArgsProvideDefaults(val: ProbeSpecMetricrelabelingsArgs): ProbeSpecMetricrelabelingsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface ProbeSpecOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1.ProbeSpecOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1.ProbeSpecOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface ProbeSpecOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.ProbeSpecOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.ProbeSpecOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ProbeSpecOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ProbeSpecOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface ProbeSpecOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.
         */
        export interface ProbeSpecProberArgs {
            /**
             * Path to collect metrics from. Defaults to `/probe`.
             */
            path?: pulumi.Input<string>;
            /**
             * Optional ProxyURL.
             */
            proxyUrl?: pulumi.Input<string>;
            /**
             * HTTP scheme to use for scraping. Defaults to `http`.
             */
            scheme?: pulumi.Input<string>;
            /**
             * Mandatory URL of the prober.
             */
            url: pulumi.Input<string>;
        }
        /**
         * probeSpecProberArgsProvideDefaults sets the appropriate defaults for ProbeSpecProberArgs
         */
        export function probeSpecProberArgsProvideDefaults(val: ProbeSpecProberArgs): ProbeSpecProberArgs {
            return {
                ...val,
                path: (val.path) ?? "/probe",
            };
        }

        /**
         * Targets defines a set of static or dynamically discovered targets to probe.
         */
        export interface ProbeSpecTargetsArgs {
            /**
             * ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence.
             */
            ingress?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsIngressArgs>;
            /**
             * staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.
             */
            staticConfig?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsStaticconfigArgs>;
        }

        /**
         * ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence.
         */
        export interface ProbeSpecTargetsIngressArgs {
            /**
             * From which namespaces to select Ingress objects.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsIngressNamespaceselectorArgs>;
            /**
             * RelabelConfigs to apply to the label set of the target before it gets scraped. The original ingress address is available via the `__tmp_prometheus_ingress_address` label. It can be used to customize the probed URL. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelingConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsIngressRelabelingconfigsArgs>[]>;
            /**
             * Selector to select the Ingress objects.
             */
            selector?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsIngressSelectorArgs>;
        }

        /**
         * From which namespaces to select Ingress objects.
         */
        export interface ProbeSpecTargetsIngressNamespaceselectorArgs {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: pulumi.Input<boolean>;
            /**
             * List of namespace names to select from.
             */
            matchNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ProbeSpecTargetsIngressRelabelingconfigsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * probeSpecTargetsIngressRelabelingconfigsArgsProvideDefaults sets the appropriate defaults for ProbeSpecTargetsIngressRelabelingconfigsArgs
         */
        export function probeSpecTargetsIngressRelabelingconfigsArgsProvideDefaults(val: ProbeSpecTargetsIngressRelabelingconfigsArgs): ProbeSpecTargetsIngressRelabelingconfigsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * Selector to select the Ingress objects.
         */
        export interface ProbeSpecTargetsIngressSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsIngressSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ProbeSpecTargetsIngressSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.
         */
        export interface ProbeSpecTargetsStaticconfigArgs {
            /**
             * Labels assigned to all metrics scraped from the targets.
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * RelabelConfigs to apply to the label set of the targets before it gets scraped. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelingConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ProbeSpecTargetsStaticconfigRelabelingconfigsArgs>[]>;
            /**
             * The list of hosts to probe.
             */
            static?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ProbeSpecTargetsStaticconfigRelabelingconfigsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * probeSpecTargetsStaticconfigRelabelingconfigsArgsProvideDefaults sets the appropriate defaults for ProbeSpecTargetsStaticconfigRelabelingconfigsArgs
         */
        export function probeSpecTargetsStaticconfigRelabelingconfigsArgsProvideDefaults(val: ProbeSpecTargetsStaticconfigRelabelingconfigsArgs): ProbeSpecTargetsStaticconfigRelabelingconfigsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * TLS configuration to use when scraping the endpoint.
         */
        export interface ProbeSpecTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface ProbeSpecTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface ProbeSpecTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.ProbeSpecTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ProbeSpecTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface ProbeSpecTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Specification of desired alerting rule definitions for Prometheus.
         */
        export interface PrometheusRuleSpecArgs {
            /**
             * Content of Prometheus rule file
             */
            groups?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.PrometheusRuleSpecGroupsArgs>[]>;
        }

        /**
         * RuleGroup is a list of sequentially evaluated recording and alerting rules. Note: PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances.  Valid values for this field are 'warn' or 'abort'.  More info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response
         */
        export interface PrometheusRuleSpecGroupsArgs {
            interval?: pulumi.Input<string>;
            name: pulumi.Input<string>;
            partial_response_strategy?: pulumi.Input<string>;
            rules: pulumi.Input<pulumi.Input<inputs.monitoring.v1.PrometheusRuleSpecGroupsRulesArgs>[]>;
        }

        /**
         * Rule describes an alerting or recording rule See Prometheus documentation: [alerting](https://www.prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) or [recording](https://www.prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules) rule
         */
        export interface PrometheusRuleSpecGroupsRulesArgs {
            alert?: pulumi.Input<string>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            expr: pulumi.Input<number | string>;
            for?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            record?: pulumi.Input<string>;
        }

        /**
         * Specification of desired Service selection for target discovery by Prometheus.
         */
        export interface ServiceMonitorSpecArgs {
            /**
             * A list of endpoints allowed as part of this ServiceMonitor.
             */
            endpoints: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsArgs>[]>;
            /**
             * JobLabel selects the label from the associated Kubernetes service which will be used as the `job` label for all metrics. 
             *  For example: If in `ServiceMonitor.spec.jobLabel: foo` and in `Service.metadata.labels.foo: bar`, then the `job="bar"` label is added to all metrics. 
             *  If the value of this field is empty or if the label doesn't exist for the given Service, the `job` label of the metrics defaults to the name of the Kubernetes Service.
             */
            jobLabel?: pulumi.Input<string>;
            /**
             * Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelLimit?: pulumi.Input<number>;
            /**
             * Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelNameLengthLimit?: pulumi.Input<number>;
            /**
             * Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
             */
            labelValueLengthLimit?: pulumi.Input<number>;
            /**
             * Selector to select which namespaces the Kubernetes Endpoints objects are discovered from.
             */
            namespaceSelector?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecNamespaceselectorArgs>;
            /**
             * PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics.
             */
            podTargetLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
             */
            sampleLimit?: pulumi.Input<number>;
            /**
             * Selector to select Endpoints objects.
             */
            selector: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecSelectorArgs>;
            /**
             * TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics.
             */
            targetLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * TargetLimit defines a limit on the number of scraped targets that will be accepted.
             */
            targetLimit?: pulumi.Input<number>;
        }

        /**
         * Endpoint defines a scrapeable endpoint serving Prometheus metrics.
         */
        export interface ServiceMonitorSpecEndpointsArgs {
            /**
             * Authorization section for this endpoint
             */
            authorization?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsAuthorizationArgs>;
            /**
             * BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsBasicauthArgs>;
            /**
             * File to read bearer token for scraping targets.
             */
            bearerTokenFile?: pulumi.Input<string>;
            /**
             * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsBearertokensecretArgs>;
            /**
             * Whether to enable HTTP2.
             */
            enableHttp2?: pulumi.Input<boolean>;
            /**
             * FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * HonorLabels chooses the metric's labels on collisions with target labels.
             */
            honorLabels?: pulumi.Input<boolean>;
            /**
             * HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.
             */
            honorTimestamps?: pulumi.Input<boolean>;
            /**
             * Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.
             */
            interval?: pulumi.Input<string>;
            /**
             * MetricRelabelConfigs to apply to samples before ingestion.
             */
            metricRelabelings?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsMetricrelabelingsArgs>[]>;
            /**
             * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2Args>;
            /**
             * Optional HTTP URL parameters
             */
            params?: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
            /**
             * HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. `/metrics`).
             */
            path?: pulumi.Input<string>;
            /**
             * Name of the service port this endpoint refers to. Mutually exclusive with targetPort.
             */
            port?: pulumi.Input<string>;
            /**
             * ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.
             */
            proxyUrl?: pulumi.Input<string>;
            /**
             * RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
             */
            relabelings?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsRelabelingsArgs>[]>;
            /**
             * HTTP scheme to use for scraping.
             */
            scheme?: pulumi.Input<string>;
            /**
             * Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than `Interval` in which the latter is used.
             */
            scrapeTimeout?: pulumi.Input<string>;
            /**
             * Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port.
             */
            targetPort?: pulumi.Input<number | string>;
            /**
             * TLS configuration to use when scraping the endpoint
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigArgs>;
        }

        /**
         * Authorization section for this endpoint
         */
        export interface ServiceMonitorSpecEndpointsAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface ServiceMonitorSpecEndpointsAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints
         */
        export interface ServiceMonitorSpecEndpointsBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface ServiceMonitorSpecEndpointsBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface ServiceMonitorSpecEndpointsBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator.
         */
        export interface ServiceMonitorSpecEndpointsBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ServiceMonitorSpecEndpointsMetricrelabelingsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * serviceMonitorSpecEndpointsMetricrelabelingsArgsProvideDefaults sets the appropriate defaults for ServiceMonitorSpecEndpointsMetricrelabelingsArgs
         */
        export function serviceMonitorSpecEndpointsMetricrelabelingsArgsProvideDefaults(val: ServiceMonitorSpecEndpointsMetricrelabelingsArgs): ServiceMonitorSpecEndpointsMetricrelabelingsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer.
         */
        export interface ServiceMonitorSpecEndpointsOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface ServiceMonitorSpecEndpointsOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface ServiceMonitorSpecEndpointsOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs
         */
        export interface ServiceMonitorSpecEndpointsRelabelingsArgs {
            /**
             * Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus >= 2.36.
             */
            action?: pulumi.Input<string>;
            /**
             * Modulus to take of the hash of the source label values.
             */
            modulus?: pulumi.Input<number>;
            /**
             * Regular expression against which the extracted value is matched. Default is '(.*)'
             */
            regex?: pulumi.Input<string>;
            /**
             * Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'
             */
            replacement?: pulumi.Input<string>;
            /**
             * Separator placed between concatenated source label values. default is ';'.
             */
            separator?: pulumi.Input<string>;
            /**
             * The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.
             */
            sourceLabels?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.
             */
            targetLabel?: pulumi.Input<string>;
        }
        /**
         * serviceMonitorSpecEndpointsRelabelingsArgsProvideDefaults sets the appropriate defaults for ServiceMonitorSpecEndpointsRelabelingsArgs
         */
        export function serviceMonitorSpecEndpointsRelabelingsArgsProvideDefaults(val: ServiceMonitorSpecEndpointsRelabelingsArgs): ServiceMonitorSpecEndpointsRelabelingsArgs {
            return {
                ...val,
                action: (val.action) ?? "replace",
            };
        }

        /**
         * TLS configuration to use when scraping the endpoint
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCaArgs>;
            /**
             * Path to the CA cert in the Prometheus container to use for the targets.
             */
            caFile?: pulumi.Input<string>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCertArgs>;
            /**
             * Path to the client cert file in the Prometheus container for the targets.
             */
            certFile?: pulumi.Input<string>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Path to the client key file in the Prometheus container for the targets.
             */
            keyFile?: pulumi.Input<string>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecEndpointsTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface ServiceMonitorSpecEndpointsTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selector to select which namespaces the Kubernetes Endpoints objects are discovered from.
         */
        export interface ServiceMonitorSpecNamespaceselectorArgs {
            /**
             * Boolean describing whether all namespaces are selected in contrast to a list restricting them.
             */
            any?: pulumi.Input<boolean>;
            /**
             * List of namespace names to select from.
             */
            matchNames?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Selector to select Endpoints objects.
         */
        export interface ServiceMonitorSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1.ServiceMonitorSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface ServiceMonitorSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

    }

    export namespace v1alpha1 {
        /**
         * AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.
         */
        export interface AlertmanagerConfigSpecArgs {
            /**
             * List of inhibition rules. The rules will only apply to alerts matching the resource’s namespace.
             */
            inhibitRules?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecInhibitrulesArgs>[]>;
            /**
             * List of MuteTimeInterval specifying when the routes should be muted.
             */
            muteTimeIntervals?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsArgs>[]>;
            /**
             * List of receivers.
             */
            receivers?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversArgs>[]>;
            /**
             * The Alertmanager route definition for alerts matching the resource’s namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.
             */
            route?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecRouteArgs>;
        }

        /**
         * InhibitRule defines an inhibition rule that allows to mute alerts when other alerts are already firing. See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule
         */
        export interface AlertmanagerConfigSpecInhibitrulesArgs {
            /**
             * Labels that must have an equal value in the source and target alert for the inhibition to take effect.
             */
            equal?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource’s namespace.
             */
            sourceMatch?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecInhibitrulesSourcematchArgs>[]>;
            /**
             * Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource’s namespace.
             */
            targetMatch?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecInhibitrulesTargetmatchArgs>[]>;
        }

        /**
         * Matcher defines how to match on alert's labels.
         */
        export interface AlertmanagerConfigSpecInhibitrulesSourcematchArgs {
            /**
             * Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.
             */
            matchType?: pulumi.Input<string>;
            /**
             * Label to match.
             */
            name: pulumi.Input<string>;
            /**
             * Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.
             */
            regex?: pulumi.Input<boolean>;
            /**
             * Label value to match.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * Matcher defines how to match on alert's labels.
         */
        export interface AlertmanagerConfigSpecInhibitrulesTargetmatchArgs {
            /**
             * Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.
             */
            matchType?: pulumi.Input<string>;
            /**
             * Label to match.
             */
            name: pulumi.Input<string>;
            /**
             * Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.
             */
            regex?: pulumi.Input<boolean>;
            /**
             * Label value to match.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * MuteTimeInterval specifies the periods in time when notifications will be muted
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsArgs {
            /**
             * Name of the time interval
             */
            name?: pulumi.Input<string>;
            /**
             * TimeIntervals is a list of TimeInterval
             */
            timeIntervals?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsTimeintervalsArgs>[]>;
        }

        /**
         * TimeInterval describes intervals of time
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsTimeintervalsArgs {
            /**
             * DaysOfMonth is a list of DayOfMonthRange
             */
            daysOfMonth?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsTimeintervalsDaysofmonthArgs>[]>;
            /**
             * Months is a list of MonthRange
             */
            months?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Times is a list of TimeRange
             */
            times?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecMutetimeintervalsTimeintervalsTimesArgs>[]>;
            /**
             * Weekdays is a list of WeekdayRange
             */
            weekdays?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Years is a list of YearRange
             */
            years?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * DayOfMonthRange is an inclusive range of days of the month beginning at 1
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsTimeintervalsDaysofmonthArgs {
            /**
             * End of the inclusive range
             */
            end?: pulumi.Input<number>;
            /**
             * Start of the inclusive range
             */
            start?: pulumi.Input<number>;
        }

        /**
         * TimeRange defines a start and end time in 24hr format
         */
        export interface AlertmanagerConfigSpecMutetimeintervalsTimeintervalsTimesArgs {
            /**
             * EndTime is the end time in 24hr format.
             */
            endTime?: pulumi.Input<string>;
            /**
             * StartTime is the start time in 24hr format.
             */
            startTime?: pulumi.Input<string>;
        }

        /**
         * Receiver defines one or more notification integrations.
         */
        export interface AlertmanagerConfigSpecReceiversArgs {
            /**
             * List of Email configurations.
             */
            emailConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsArgs>[]>;
            /**
             * Name of the receiver. Must be unique across all items from the list.
             */
            name: pulumi.Input<string>;
            /**
             * List of OpsGenie configurations.
             */
            opsgenieConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsArgs>[]>;
            /**
             * List of PagerDuty configurations.
             */
            pagerdutyConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsArgs>[]>;
            /**
             * List of Pushover configurations.
             */
            pushoverConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsArgs>[]>;
            /**
             * List of Slack configurations.
             */
            slackConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsArgs>[]>;
            /**
             * List of SNS configurations
             */
            snsConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsArgs>[]>;
            /**
             * List of Telegram configurations.
             */
            telegramConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsArgs>[]>;
            /**
             * List of VictorOps configurations.
             */
            victoropsConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsArgs>[]>;
            /**
             * List of webhook configurations.
             */
            webhookConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsArgs>[]>;
            /**
             * List of WeChat configurations.
             */
            wechatConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsArgs>[]>;
        }

        /**
         * EmailConfig configures notifications via Email.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsArgs {
            /**
             * The identity to use for authentication.
             */
            authIdentity?: pulumi.Input<string>;
            /**
             * The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            authPassword?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsAuthpasswordArgs>;
            /**
             * The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            authSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsAuthsecretArgs>;
            /**
             * The username to use for authentication.
             */
            authUsername?: pulumi.Input<string>;
            /**
             * The sender address.
             */
            from?: pulumi.Input<string>;
            /**
             * Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.
             */
            headers?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsHeadersArgs>[]>;
            /**
             * The hostname to identify to the SMTP server.
             */
            hello?: pulumi.Input<string>;
            /**
             * The HTML body of the email notification.
             */
            html?: pulumi.Input<string>;
            /**
             * The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.
             */
            requireTLS?: pulumi.Input<boolean>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * The SMTP host and port through which emails are sent. E.g. example.com:25
             */
            smarthost?: pulumi.Input<string>;
            /**
             * The text body of the email notification.
             */
            text?: pulumi.Input<string>;
            /**
             * TLS configuration
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigArgs>;
            /**
             * The email address to send notifications to.
             */
            to?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsAuthpasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsAuthsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsHeadersArgs {
            /**
             * Key of the tuple.
             */
            key: pulumi.Input<string>;
            /**
             * Value of the tuple.
             */
            value: pulumi.Input<string>;
        }

        /**
         * TLS configuration
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversEmailconfigsTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OpsGenieConfig configures notifications via OpsGenie. See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsArgs {
            /**
             * Comma separated list of actions that will be available for the alert.
             */
            actions?: pulumi.Input<string>;
            /**
             * The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsApikeyArgs>;
            /**
             * The URL to send OpsGenie API requests to.
             */
            apiURL?: pulumi.Input<string>;
            /**
             * Description of the incident.
             */
            description?: pulumi.Input<string>;
            /**
             * A set of arbitrary key/value pairs that provide further detail about the incident.
             */
            details?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsDetailsArgs>[]>;
            /**
             * Optional field that can be used to specify which domain alert is related to.
             */
            entity?: pulumi.Input<string>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigArgs>;
            /**
             * Alert text limited to 130 characters.
             */
            message?: pulumi.Input<string>;
            /**
             * Additional alert note.
             */
            note?: pulumi.Input<string>;
            /**
             * Priority level of alert. Possible values are P1, P2, P3, P4, and P5.
             */
            priority?: pulumi.Input<string>;
            /**
             * List of responders responsible for notifications.
             */
            responders?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsRespondersArgs>[]>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * Backlink to the sender of the notification.
             */
            source?: pulumi.Input<string>;
            /**
             * Comma separated list of tags attached to the notifications.
             */
            tags?: pulumi.Input<string>;
            /**
             * Whether to update message and description of the alert in OpsGenie if it already exists By default, the alert is never updated in OpsGenie, the new message only appears in activity log.
             */
            updateAlerts?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsApikeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsDetailsArgs {
            /**
             * Key of the tuple.
             */
            key: pulumi.Input<string>;
            /**
             * Value of the tuple.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.
         */
        export interface AlertmanagerConfigSpecReceiversOpsgenieconfigsRespondersArgs {
            /**
             * ID of the responder.
             */
            id?: pulumi.Input<string>;
            /**
             * Name of the responder.
             */
            name?: pulumi.Input<string>;
            /**
             * Type of responder.
             */
            type: pulumi.Input<string>;
            /**
             * Username of the responder.
             */
            username?: pulumi.Input<string>;
        }

        /**
         * PagerDutyConfig configures notifications via PagerDuty. See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsArgs {
            /**
             * The class/type of the event.
             */
            class?: pulumi.Input<string>;
            /**
             * Client identification.
             */
            client?: pulumi.Input<string>;
            /**
             * Backlink to the sender of notification.
             */
            clientURL?: pulumi.Input<string>;
            /**
             * The part or component of the affected system that is broken.
             */
            component?: pulumi.Input<string>;
            /**
             * Description of the incident.
             */
            description?: pulumi.Input<string>;
            /**
             * Arbitrary key/value pairs that provide further detail about the incident.
             */
            details?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsDetailsArgs>[]>;
            /**
             * A cluster or grouping of sources.
             */
            group?: pulumi.Input<string>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigArgs>;
            /**
             * A list of image details to attach that provide further detail about an incident.
             */
            pagerDutyImageConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutyimageconfigsArgs>[]>;
            /**
             * A list of link details to attach that provide further detail about an incident.
             */
            pagerDutyLinkConfigs?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutylinkconfigsArgs>[]>;
            /**
             * The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            routingKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsRoutingkeyArgs>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * The secret's key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            serviceKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsServicekeyArgs>;
            /**
             * Severity of the incident.
             */
            severity?: pulumi.Input<string>;
            /**
             * The URL to send requests to.
             */
            url?: pulumi.Input<string>;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsDetailsArgs {
            /**
             * Key of the tuple.
             */
            key: pulumi.Input<string>;
            /**
             * Value of the tuple.
             */
            value: pulumi.Input<string>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * PagerDutyImageConfig attaches images to an incident
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutyimageconfigsArgs {
            /**
             * Alt is the optional alternative text for the image.
             */
            alt?: pulumi.Input<string>;
            /**
             * Optional URL; makes the image a clickable link.
             */
            href?: pulumi.Input<string>;
            /**
             * Src of the image being attached to the incident
             */
            src?: pulumi.Input<string>;
        }

        /**
         * PagerDutyLinkConfig attaches text links to an incident
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsPagerdutylinkconfigsArgs {
            /**
             * Text that describes the purpose of the link, and can be used as the link's text.
             */
            alt?: pulumi.Input<string>;
            /**
             * Href is the URL of the link to be attached
             */
            href?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsRoutingkeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the PagerDuty service key (when using integration type "Prometheus"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPagerdutyconfigsServicekeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsArgs {
            /**
             * How long your notification will continue to be retried for, unless the user acknowledges the notification.
             */
            expire?: pulumi.Input<string>;
            /**
             * Whether notification message is HTML or plain text.
             */
            html?: pulumi.Input<boolean>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigArgs>;
            /**
             * Notification message.
             */
            message?: pulumi.Input<string>;
            /**
             * Priority, see https://pushover.net/api#priority
             */
            priority?: pulumi.Input<string>;
            /**
             * How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.
             */
            retry?: pulumi.Input<string>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * The name of one of the sounds supported by device clients to override the user's default sound choice
             */
            sound?: pulumi.Input<string>;
            /**
             * Notification title.
             */
            title?: pulumi.Input<string>;
            /**
             * The secret's key that contains the registered application’s API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            token?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsTokenArgs>;
            /**
             * A supplementary URL shown alongside the message.
             */
            url?: pulumi.Input<string>;
            /**
             * A title for supplementary URL, otherwise just the URL is shown
             */
            urlTitle?: pulumi.Input<string>;
            /**
             * The secret's key that contains the recipient user’s user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            userKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsUserkeyArgs>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the registered application’s API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsTokenArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the recipient user’s user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversPushoverconfigsUserkeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * SlackConfig configures notifications via Slack. See https://prometheus.io/docs/alerting/latest/configuration/#slack_config
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsArgs {
            /**
             * A list of Slack actions that are sent with each notification.
             */
            actions?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsActionsArgs>[]>;
            /**
             * The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiURL?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsApiurlArgs>;
            callbackId?: pulumi.Input<string>;
            /**
             * The channel or user to send notifications to.
             */
            channel?: pulumi.Input<string>;
            color?: pulumi.Input<string>;
            fallback?: pulumi.Input<string>;
            /**
             * A list of Slack fields that are sent with each notification.
             */
            fields?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsFieldsArgs>[]>;
            footer?: pulumi.Input<string>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigArgs>;
            iconEmoji?: pulumi.Input<string>;
            iconURL?: pulumi.Input<string>;
            imageURL?: pulumi.Input<string>;
            linkNames?: pulumi.Input<boolean>;
            mrkdwnIn?: pulumi.Input<pulumi.Input<string>[]>;
            pretext?: pulumi.Input<string>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            shortFields?: pulumi.Input<boolean>;
            text?: pulumi.Input<string>;
            thumbURL?: pulumi.Input<string>;
            title?: pulumi.Input<string>;
            titleLink?: pulumi.Input<string>;
            username?: pulumi.Input<string>;
        }

        /**
         * SlackAction configures a single Slack action that is sent with each notification. See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons for more information.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsActionsArgs {
            /**
             * SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.
             */
            confirm?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsActionsConfirmArgs>;
            name?: pulumi.Input<string>;
            style?: pulumi.Input<string>;
            text: pulumi.Input<string>;
            type: pulumi.Input<string>;
            url?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        /**
         * SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsActionsConfirmArgs {
            dismissText?: pulumi.Input<string>;
            okText?: pulumi.Input<string>;
            text: pulumi.Input<string>;
            title?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsApiurlArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * SlackField configures a single Slack field that is sent with each notification. Each field must contain a title, value, and optionally, a boolean value to indicate if the field is short enough to be displayed next to other fields designated as short. See https://api.slack.com/docs/message-attachments#fields for more information.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsFieldsArgs {
            short?: pulumi.Input<boolean>;
            title: pulumi.Input<string>;
            value: pulumi.Input<string>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSlackconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * SNSConfig configures notifications via AWS SNS. See https://prometheus.io/docs/alerting/latest/configuration/#sns_configs
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsArgs {
            /**
             * The SNS API URL i.e. https://sns.us-east-2.amazonaws.com. If not specified, the SNS API URL from the SNS SDK will be used.
             */
            apiURL?: pulumi.Input<string>;
            /**
             * SNS message attributes.
             */
            attributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigArgs>;
            /**
             * The message content of the SNS notification.
             */
            message?: pulumi.Input<string>;
            /**
             * Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the TopicARN or TargetARN.
             */
            phoneNumber?: pulumi.Input<string>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * Configures AWS's Signature Verification 4 signing process to sign requests.
             */
            sigv4?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsSigv4Args>;
            /**
             * Subject line when the message is delivered to email endpoints.
             */
            subject?: pulumi.Input<string>;
            /**
             * The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or PhoneNumber.
             */
            targetARN?: pulumi.Input<string>;
            /**
             * SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic If you don't specify this value, you must specify a value for the PhoneNumber or TargetARN.
             */
            topicARN?: pulumi.Input<string>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Configures AWS's Signature Verification 4 signing process to sign requests.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsSigv4Args {
            /**
             * AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.
             */
            accessKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsSigv4AccesskeyArgs>;
            /**
             * Profile is the named AWS profile used to authenticate.
             */
            profile?: pulumi.Input<string>;
            /**
             * Region is the AWS region. If blank, the region from the default credentials chain used.
             */
            region?: pulumi.Input<string>;
            /**
             * RoleArn is the named AWS profile used to authenticate.
             */
            roleArn?: pulumi.Input<string>;
            /**
             * SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
             */
            secretKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversSnsconfigsSigv4SecretkeyArgs>;
        }

        /**
         * AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsSigv4AccesskeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used.
         */
        export interface AlertmanagerConfigSpecReceiversSnsconfigsSigv4SecretkeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TelegramConfig configures notifications via Telegram. See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsArgs {
            /**
             * The Telegram API URL i.e. https://api.telegram.org. If not specified, default API URL will be used.
             */
            apiURL?: pulumi.Input<string>;
            /**
             * Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            botToken?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsBottokenArgs>;
            /**
             * The Telegram chat ID.
             */
            chatID?: pulumi.Input<number>;
            /**
             * Disable telegram notifications
             */
            disableNotifications?: pulumi.Input<boolean>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigArgs>;
            /**
             * Message template
             */
            message?: pulumi.Input<string>;
            /**
             * Parse mode for telegram message
             */
            parseMode?: pulumi.Input<string>;
            /**
             * Whether to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
        }

        /**
         * Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsBottokenArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversTelegramconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * VictorOpsConfig configures notifications via VictorOps. See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsArgs {
            /**
             * The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiKey?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsApikeyArgs>;
            /**
             * The VictorOps API URL.
             */
            apiUrl?: pulumi.Input<string>;
            /**
             * Additional custom fields for notification.
             */
            customFields?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsCustomfieldsArgs>[]>;
            /**
             * Contains summary of the alerted problem.
             */
            entityDisplayName?: pulumi.Input<string>;
            /**
             * The HTTP client's configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigArgs>;
            /**
             * Describes the behavior of the alert (CRITICAL, WARNING, INFO).
             */
            messageType?: pulumi.Input<string>;
            /**
             * The monitoring tool the state message is from.
             */
            monitoringTool?: pulumi.Input<string>;
            /**
             * A key used to map the alert to a team.
             */
            routingKey?: pulumi.Input<string>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * Contains long explanation of the alerted problem.
             */
            stateMessage?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsApikeyArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * KeyValue defines a (key, value) tuple.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsCustomfieldsArgs {
            /**
             * Key of the tuple.
             */
            key: pulumi.Input<string>;
            /**
             * Value of the tuple.
             */
            value: pulumi.Input<string>;
        }

        /**
         * The HTTP client's configuration.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversVictoropsconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * WebhookConfig configures notifications via a generic receiver supporting the webhook payload. See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsArgs {
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigArgs>;
            /**
             * Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.
             */
            maxAlerts?: pulumi.Input<number>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            /**
             * The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.
             */
            url?: pulumi.Input<string>;
            /**
             * The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            urlSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsUrlsecretArgs>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWebhookconfigsUrlsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * WeChatConfig configures notifications via WeChat. See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsArgs {
            agentID?: pulumi.Input<string>;
            /**
             * The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            apiSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsApisecretArgs>;
            /**
             * The WeChat API URL.
             */
            apiURL?: pulumi.Input<string>;
            /**
             * The corp id for authentication.
             */
            corpID?: pulumi.Input<string>;
            /**
             * HTTP client configuration.
             */
            httpConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigArgs>;
            /**
             * API request data as defined by the WeChat API.
             */
            message?: pulumi.Input<string>;
            messageType?: pulumi.Input<string>;
            /**
             * Whether or not to notify about resolved alerts.
             */
            sendResolved?: pulumi.Input<boolean>;
            toParty?: pulumi.Input<string>;
            toTag?: pulumi.Input<string>;
            toUser?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsApisecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * HTTP client configuration.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigArgs {
            /**
             * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
             */
            authorization?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorizationArgs>;
            /**
             * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
             */
            basicAuth?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthArgs>;
            /**
             * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
             */
            bearerTokenSecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBearertokensecretArgs>;
            /**
             * FollowRedirects specifies whether the client should follow HTTP 3xx redirects.
             */
            followRedirects?: pulumi.Input<boolean>;
            /**
             * OAuth2 client credentials used to fetch a token for the targets.
             */
            oauth2?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2Args>;
            /**
             * Optional proxy URL.
             */
            proxyURL?: pulumi.Input<string>;
            /**
             * TLS configuration for the client.
             */
            tlsConfig?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigArgs>;
        }

        /**
         * Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorizationArgs {
            /**
             * The secret's key that contains the credentials of the request
             */
            credentials?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorizationCredentialsArgs>;
            /**
             * Set the authentication type. Defaults to Bearer, Basic will cause an error
             */
            type?: pulumi.Input<string>;
        }

        /**
         * The secret's key that contains the credentials of the request
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigAuthorizationCredentialsArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthArgs {
            /**
             * The secret in the service monitor namespace that contains the password for authentication.
             */
            password?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthPasswordArgs>;
            /**
             * The secret in the service monitor namespace that contains the username for authentication.
             */
            username?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthUsernameArgs>;
        }

        /**
         * The secret in the service monitor namespace that contains the password for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthPasswordArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret in the service monitor namespace that contains the username for authentication.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBasicauthUsernameArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigBearertokensecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * OAuth2 client credentials used to fetch a token for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2Args {
            /**
             * The secret or configmap containing the OAuth2 client id
             */
            clientId: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidArgs>;
            /**
             * The secret containing the OAuth2 client secret
             */
            clientSecret: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientsecretArgs>;
            /**
             * Parameters to append to the token URL
             */
            endpointParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * OAuth2 scopes used for the token request
             */
            scopes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * The URL to fetch the token from
             */
            tokenUrl: pulumi.Input<string>;
        }

        /**
         * The secret or configmap containing the OAuth2 client id
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientidSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The secret containing the OAuth2 client secret
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigOauth2ClientsecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * TLS configuration for the client.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigArgs {
            /**
             * Struct containing the CA cert to use for the targets.
             */
            ca?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaArgs>;
            /**
             * Struct containing the client cert file for the targets.
             */
            cert?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertArgs>;
            /**
             * Disable target certificate validation.
             */
            insecureSkipVerify?: pulumi.Input<boolean>;
            /**
             * Secret containing the client key file for the targets.
             */
            keySecret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigKeysecretArgs>;
            /**
             * Used to verify the hostname for the targets.
             */
            serverName?: pulumi.Input<string>;
        }

        /**
         * Struct containing the CA cert to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCaSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Struct containing the client cert file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertArgs {
            /**
             * ConfigMap containing data to use for the targets.
             */
            configMap?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertConfigmapArgs>;
            /**
             * Secret containing data to use for the targets.
             */
            secret?: pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertSecretArgs>;
        }

        /**
         * ConfigMap containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertConfigmapArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing data to use for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigCertSecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Secret containing the client key file for the targets.
         */
        export interface AlertmanagerConfigSpecReceiversWechatconfigsHttpconfigTlsconfigKeysecretArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Alertmanager route definition for alerts matching the resource’s namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route.
         */
        export interface AlertmanagerConfigSpecRouteArgs {
            /**
             * Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.
             */
            continue?: pulumi.Input<boolean>;
            /**
             * List of labels to group by. Labels must not be repeated (unique list). Special label "..." (aggregate by all possible labels), if provided, must be the only element in the list.
             */
            groupBy?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * How long to wait before sending an updated notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "5m"
             */
            groupInterval?: pulumi.Input<string>;
            /**
             * How long to wait before sending the initial notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "30s"
             */
            groupWait?: pulumi.Input<string>;
            /**
             * List of matchers that the alert’s labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: <object namespace>` matcher.
             */
            matchers?: pulumi.Input<pulumi.Input<inputs.monitoring.v1alpha1.AlertmanagerConfigSpecRouteMatchersArgs>[]>;
            /**
             * Note: this comment applies to the field definition above but appears below otherwise it gets included in the generated manifest. CRD schema doesn't support self-referential types for now (see https://github.com/kubernetes/kubernetes/issues/62872). We have to use an alternative type to circumvent the limitation. The downside is that the Kube API can't validate the data beyond the fact that it is a valid JSON representation. MuteTimeIntervals is a list of MuteTimeInterval names that will mute this route when matched,
             */
            muteTimeIntervals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.
             */
            receiver?: pulumi.Input<string>;
            /**
             * How long to wait before repeating the last notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: "4h"
             */
            repeatInterval?: pulumi.Input<string>;
            /**
             * Child routes.
             */
            routes?: pulumi.Input<pulumi.Input<{[key: string]: any}>[]>;
        }

        /**
         * Matcher defines how to match on alert's labels.
         */
        export interface AlertmanagerConfigSpecRouteMatchersArgs {
            /**
             * Match operation available with AlertManager >= v0.22.0 and takes precedence over Regex (deprecated) if non-empty.
             */
            matchType?: pulumi.Input<string>;
            /**
             * Label to match.
             */
            name: pulumi.Input<string>;
            /**
             * Whether to match on equality (false) or regular-expression (true). Deprecated as of AlertManager >= v0.22.0 where a user should use MatchType instead.
             */
            regex?: pulumi.Input<boolean>;
            /**
             * Label value to match.
             */
            value?: pulumi.Input<string>;
        }
    }
}

export namespace opentelemetry {
    export namespace v1alpha1 {
        /**
         * InstrumentationSpec defines the desired state of OpenTelemetry SDK and instrumentation.
         */
        export interface InstrumentationSpecArgs {
            /**
             * Apache defines configuration for Apache HTTPD auto-instrumentation.
             */
            apacheHttpd?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdArgs>;
            /**
             * DotNet defines configuration for DotNet auto-instrumentation.
             */
            dotnet?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetArgs>;
            /**
             * Env defines common env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecEnvArgs>[]>;
            /**
             * Exporter defines exporter configuration.
             */
            exporter?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecExporterArgs>;
            /**
             * Go defines configuration for Go auto-instrumentation. When using Go auto-instrumenetation you must provide a value for the OTEL_GO_AUTO_TARGET_EXE env var via the Instrumentation env vars or via the instrumentation.opentelemetry.io/otel-go-auto-target-exe pod annotation. Failure to set this value causes instrumentation injection to abort, leaving the original pod unchanged.
             */
            go?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoArgs>;
            /**
             * Java defines configuration for java auto-instrumentation.
             */
            java?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaArgs>;
            /**
             * NodeJS defines configuration for nodejs auto-instrumentation.
             */
            nodejs?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsArgs>;
            /**
             * Propagators defines inter-process context propagation configuration. Values in this list will be set in the OTEL_PROPAGATORS env var. Enum=tracecontext;baggage;b3;b3multi;jaeger;xray;ottrace;none
             */
            propagators?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Python defines configuration for python auto-instrumentation.
             */
            python?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonArgs>;
            /**
             * Resource defines the configuration for the resource attributes, as defined by the OpenTelemetry specification.
             */
            resource?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecResourceArgs>;
            /**
             * Sampler defines sampling configuration.
             */
            sampler?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecSamplerArgs>;
        }

        /**
         * Apache defines configuration for Apache HTTPD auto-instrumentation.
         */
        export interface InstrumentationSpecApachehttpdArgs {
            /**
             * Attrs defines Apache HTTPD agent specific attributes. The precedence is: `agent default attributes` > `instrument spec attributes` . Attributes are documented at https://github.com/open-telemetry/opentelemetry-cpp-contrib/tree/main/instrumentation/otel-webserver-module
             */
            attrs?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdAttrsArgs>[]>;
            /**
             * Location of Apache HTTPD server configuration. Needed only if different from default "/usr/local/apache2/conf"
             */
            configPath?: pulumi.Input<string>;
            /**
             * Env defines Apache HTTPD specific env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdEnvArgs>[]>;
            /**
             * Image is a container image with Apache SDK and auto-instrumentation.
             */
            image?: pulumi.Input<string>;
            /**
             * Resources describes the compute resource requirements.
             */
            resourceRequirements?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdResourcerequirementsArgs>;
            /**
             * Apache HTTPD server version. One of 2.4 or 2.2. Default is 2.4
             */
            version?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecApachehttpdAttrsArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdAttrsValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecApachehttpdAttrsValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdAttrsValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdAttrsValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdAttrsValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdAttrsValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecApachehttpdAttrsValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecApachehttpdAttrsValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecApachehttpdAttrsValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecApachehttpdAttrsValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecApachehttpdEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecApachehttpdEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecApachehttpdEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecApachehttpdEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecApachehttpdEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecApachehttpdEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Resources describes the compute resource requirements.
         */
        export interface InstrumentationSpecApachehttpdResourcerequirementsArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecApachehttpdResourcerequirementsClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface InstrumentationSpecApachehttpdResourcerequirementsClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * DotNet defines configuration for DotNet auto-instrumentation.
         */
        export interface InstrumentationSpecDotnetArgs {
            /**
             * Env defines DotNet specific env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetEnvArgs>[]>;
            /**
             * Image is a container image with DotNet SDK and auto-instrumentation.
             */
            image?: pulumi.Input<string>;
            /**
             * Resources describes the compute resource requirements.
             */
            resourceRequirements?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetResourcerequirementsArgs>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecDotnetEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecDotnetEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecDotnetEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecDotnetEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecDotnetEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecDotnetEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Resources describes the compute resource requirements.
         */
        export interface InstrumentationSpecDotnetResourcerequirementsArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecDotnetResourcerequirementsClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface InstrumentationSpecDotnetResourcerequirementsClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Exporter defines exporter configuration.
         */
        export interface InstrumentationSpecExporterArgs {
            /**
             * Endpoint is address of the collector with OTLP endpoint.
             */
            endpoint?: pulumi.Input<string>;
        }

        /**
         * Go defines configuration for Go auto-instrumentation. When using Go auto-instrumenetation you must provide a value for the OTEL_GO_AUTO_TARGET_EXE env var via the Instrumentation env vars or via the instrumentation.opentelemetry.io/otel-go-auto-target-exe pod annotation. Failure to set this value causes instrumentation injection to abort, leaving the original pod unchanged.
         */
        export interface InstrumentationSpecGoArgs {
            /**
             * Env defines Go specific env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoEnvArgs>[]>;
            /**
             * Image is a container image with Go SDK and auto-instrumentation.
             */
            image?: pulumi.Input<string>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecGoEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecGoEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecGoEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecGoEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecGoEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecGoEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecGoEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Java defines configuration for java auto-instrumentation.
         */
        export interface InstrumentationSpecJavaArgs {
            /**
             * Env defines java specific env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaEnvArgs>[]>;
            /**
             * Image is a container image with javaagent auto-instrumentation JAR.
             */
            image?: pulumi.Input<string>;
            /**
             * Resources describes the compute resource requirements.
             */
            resources?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaResourcesArgs>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecJavaEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecJavaEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecJavaEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecJavaEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecJavaEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecJavaEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Resources describes the compute resource requirements.
         */
        export interface InstrumentationSpecJavaResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecJavaResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface InstrumentationSpecJavaResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * NodeJS defines configuration for nodejs auto-instrumentation.
         */
        export interface InstrumentationSpecNodejsArgs {
            /**
             * Env defines nodejs specific env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsEnvArgs>[]>;
            /**
             * Image is a container image with NodeJS SDK and auto-instrumentation.
             */
            image?: pulumi.Input<string>;
            /**
             * Resources describes the compute resource requirements.
             */
            resourceRequirements?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsResourcerequirementsArgs>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecNodejsEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecNodejsEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecNodejsEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecNodejsEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecNodejsEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecNodejsEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Resources describes the compute resource requirements.
         */
        export interface InstrumentationSpecNodejsResourcerequirementsArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecNodejsResourcerequirementsClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface InstrumentationSpecNodejsResourcerequirementsClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Python defines configuration for python auto-instrumentation.
         */
        export interface InstrumentationSpecPythonArgs {
            /**
             * Env defines python specific env vars. There are four layers for env vars' definitions and the precedence order is: `original container env vars` > `language specific env vars` > `common env vars` > `instrument spec configs' vars`. If the former var had been defined, then the other vars would be ignored.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonEnvArgs>[]>;
            /**
             * Image is a container image with Python SDK and auto-instrumentation.
             */
            image?: pulumi.Input<string>;
            /**
             * Resources describes the compute resource requirements.
             */
            resourceRequirements?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonResourcerequirementsArgs>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface InstrumentationSpecPythonEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface InstrumentationSpecPythonEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface InstrumentationSpecPythonEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface InstrumentationSpecPythonEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface InstrumentationSpecPythonEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface InstrumentationSpecPythonEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Resources describes the compute resource requirements.
         */
        export interface InstrumentationSpecPythonResourcerequirementsArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.InstrumentationSpecPythonResourcerequirementsClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface InstrumentationSpecPythonResourcerequirementsClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * Resource defines the configuration for the resource attributes, as defined by the OpenTelemetry specification.
         */
        export interface InstrumentationSpecResourceArgs {
            /**
             * AddK8sUIDAttributes defines whether K8s UID attributes should be collected (e.g. k8s.deployment.uid).
             */
            addK8sUIDAttributes?: pulumi.Input<boolean>;
            /**
             * Attributes defines attributes that are added to the resource. For example environment: dev
             */
            resourceAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * Sampler defines sampling configuration.
         */
        export interface InstrumentationSpecSamplerArgs {
            /**
             * Argument defines sampler argument. The value depends on the sampler type. For instance for parentbased_traceidratio sampler type it is a number in range [0..1] e.g. 0.25. The value will be set in the OTEL_TRACES_SAMPLER_ARG env var.
             */
            argument?: pulumi.Input<string>;
            /**
             * Type defines sampler type. The value will be set in the OTEL_TRACES_SAMPLER env var. The value can be for instance parentbased_always_on, parentbased_always_off, parentbased_traceidratio...
             */
            type?: pulumi.Input<string>;
        }

        /**
         * OpenTelemetryCollectorSpec defines the desired state of OpenTelemetryCollector.
         */
        export interface OpenTelemetryCollectorSpecArgs {
            /**
             * If specified, indicates the pod's scheduling constraints
             */
            affinity?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityArgs>;
            /**
             * Args is the set of arguments to pass to the OpenTelemetry Collector binary
             */
            args?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Autoscaler specifies the pod autoscaling configuration to use for the OpenTelemetryCollector workload.
             */
            autoscaler?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAutoscalerArgs>;
            /**
             * Config is the raw JSON to be used as the collector's configuration. Refer to the OpenTelemetry Collector documentation for details.
             */
            config?: pulumi.Input<string>;
            /**
             * ENV vars to set on the OpenTelemetry Collector's Pods. These can then in certain cases be consumed in the config file for the Collector.
             */
            env?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvArgs>[]>;
            /**
             * List of sources to populate environment variables on the OpenTelemetry Collector's Pods. These can then in certain cases be consumed in the config file for the Collector.
             */
            envFrom?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvfromArgs>[]>;
            /**
             * HostNetwork indicates if the pod should run in the host networking namespace.
             */
            hostNetwork?: pulumi.Input<boolean>;
            /**
             * Image indicates the container image to use for the OpenTelemetry Collector.
             */
            image?: pulumi.Input<string>;
            /**
             * ImagePullPolicy indicates the pull policy to be used for retrieving the container image (Always, Never, IfNotPresent)
             */
            imagePullPolicy?: pulumi.Input<string>;
            /**
             * Ingress is used to specify how OpenTelemetry Collector is exposed. This functionality is only available if one of the valid modes is set. Valid modes are: deployment, daemonset and statefulset.
             */
            ingress?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecIngressArgs>;
            /**
             * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
             */
            lifecycle?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecycleArgs>;
            /**
             * Liveness config for the OpenTelemetry Collector except the probe handler which is auto generated from the health extension of the collector. It is only effective when healthcheckextension is configured in the OpenTelemetry Collector pipeline.
             */
            livenessProbe?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLivenessprobeArgs>;
            /**
             * MaxReplicas sets an upper bound to the autoscaling feature. If MaxReplicas is set autoscaling is enabled. Deprecated: use "OpenTelemetryCollector.Spec.Autoscaler.MaxReplicas" instead.
             */
            maxReplicas?: pulumi.Input<number>;
            /**
             * MinReplicas sets a lower bound to the autoscaling feature.  Set this if your are using autoscaling. It must be at least 1 Deprecated: use "OpenTelemetryCollector.Spec.Autoscaler.MinReplicas" instead.
             */
            minReplicas?: pulumi.Input<number>;
            /**
             * Mode represents how the collector should be deployed (deployment, daemonset, statefulset or sidecar)
             */
            mode?: pulumi.Input<string>;
            /**
             * NodeSelector to schedule OpenTelemetry Collector pods. This is only relevant to daemonset, statefulset, and deployment mode
             */
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PodAnnotations is the set of annotations that will be attached to Collector and Target Allocator pods.
             */
            podAnnotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
             */
            podSecurityContext?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecPodsecuritycontextArgs>;
            /**
             * Ports allows a set of ports to be exposed by the underlying v1.Service. By default, the operator will attempt to infer the required ports by parsing the .Spec.Config property but this property can be used to open additional ports that can't be inferred by the operator, like for custom receivers.
             */
            ports?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecPortsArgs>[]>;
            /**
             * If specified, indicates the pod's priority. If not specified, the pod priority will be default or zero if there is no default.
             */
            priorityClassName?: pulumi.Input<string>;
            /**
             * Replicas is the number of pod instances for the underlying OpenTelemetry Collector. Set this if your are not using autoscaling
             */
            replicas?: pulumi.Input<number>;
            /**
             * Resources to set on the OpenTelemetry Collector pods.
             */
            resources?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecResourcesArgs>;
            /**
             * SecurityContext will be set as the container security context.
             */
            securityContext?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecSecuritycontextArgs>;
            /**
             * ServiceAccount indicates the name of an existing service account to use with this instance. When set, the operator will not automatically create a ServiceAccount for the collector.
             */
            serviceAccount?: pulumi.Input<string>;
            /**
             * TargetAllocator indicates a value which determines whether to spawn a target allocation resource or not.
             */
            targetAllocator?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecTargetallocatorArgs>;
            /**
             * Duration in seconds the pod needs to terminate gracefully upon probe failure.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Toleration to schedule OpenTelemetry Collector pods. This is only relevant to daemonset, statefulset, and deployment mode
             */
            tolerations?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecTolerationsArgs>[]>;
            /**
             * UpgradeStrategy represents how the operator will handle upgrades to the CR when a newer version of the operator is deployed
             */
            upgradeStrategy?: pulumi.Input<string>;
            /**
             * VolumeClaimTemplates will provide stable storage using PersistentVolumes. Only available when the mode=statefulset.
             */
            volumeClaimTemplates?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesArgs>[]>;
            /**
             * VolumeMounts represents the mount points to use in the underlying collector deployment(s)
             */
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumemountsArgs>[]>;
            /**
             * Volumes represents which volumes to use in the underlying collector deployment(s).
             */
            volumes?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesArgs>[]>;
        }

        /**
         * If specified, indicates the pod's scheduling constraints
         */
        export interface OpenTelemetryCollectorSpecAffinityArgs {
            /**
             * Describes node affinity scheduling rules for the pod.
             */
            nodeAffinity?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityArgs>;
            /**
             * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAffinity?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityArgs>;
            /**
             * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
             */
            podAntiAffinity?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityArgs>;
        }

        /**
         * Describes node affinity scheduling rules for the pod.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs>;
        }

        /**
         * An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * A node selector term, associated with the corresponding weight.
             */
            preference: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs>;
            /**
             * Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * A node selector term, associated with the corresponding weight.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityPreferredduringschedulingignoredduringexecutionPreferenceMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A list of node selector terms. The terms are ORed.
             */
            nodeSelectorTerms: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs>[]>;
        }

        /**
         * A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsArgs {
            /**
             * A list of node selector requirements by node's labels.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs>[]>;
            /**
             * A list of node selector requirements by node's fields.
             */
            matchFields?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchexpressionsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityNodeaffinityRequiredduringschedulingignoredduringexecutionNodeselectortermsMatchfieldsArgs {
            /**
             * The label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
             */
            operator: pulumi.Input<string>;
            /**
             * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityArgs {
            /**
             * The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
             */
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs>[]>;
            /**
             * If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
             */
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs>[]>;
        }

        /**
         * The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionArgs {
            /**
             * Required. A pod affinity term, associated with the corresponding weight.
             */
            podAffinityTerm: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs>;
            /**
             * weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
             */
            weight: pulumi.Input<number>;
        }

        /**
         * Required. A pod affinity term, associated with the corresponding weight.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityPreferredduringschedulingignoredduringexecutionPodaffinitytermNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionArgs {
            /**
             * A label query over a set of resources, in this case pods.
             */
            labelSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs>;
            /**
             * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
             */
            namespaceSelector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs>;
            /**
             * namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
             */
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
             */
            topologyKey: pulumi.Input<string>;
        }

        /**
         * A label query over a set of resources, in this case pods.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionLabelselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecAffinityPodantiaffinityRequiredduringschedulingignoredduringexecutionNamespaceselectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * Autoscaler specifies the pod autoscaling configuration to use for the OpenTelemetryCollector workload.
         */
        export interface OpenTelemetryCollectorSpecAutoscalerArgs {
            /**
             * HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
             */
            behavior?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAutoscalerBehaviorArgs>;
            /**
             * MaxReplicas sets an upper bound to the autoscaling feature. If MaxReplicas is set autoscaling is enabled.
             */
            maxReplicas?: pulumi.Input<number>;
            /**
             * MinReplicas sets a lower bound to the autoscaling feature.  Set this if your are using autoscaling. It must be at least 1
             */
            minReplicas?: pulumi.Input<number>;
            /**
             * TargetCPUUtilization sets the target average CPU used across all replicas. If average CPU exceeds this value, the HPA will scale up. Defaults to 90 percent.
             */
            targetCPUUtilization?: pulumi.Input<number>;
            /**
             * TargetMemoryUtilization sets the target average memory utilization across all replicas
             */
            targetMemoryUtilization?: pulumi.Input<number>;
        }

        /**
         * HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
         */
        export interface OpenTelemetryCollectorSpecAutoscalerBehaviorArgs {
            /**
             * scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).
             */
            scaleDown?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAutoscalerBehaviorScaledownArgs>;
            /**
             * scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of: * increase no more than 4 pods per 60 seconds * double the number of pods per 60 seconds No stabilization is used.
             */
            scaleUp?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAutoscalerBehaviorScaleupArgs>;
        }

        /**
         * scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).
         */
        export interface OpenTelemetryCollectorSpecAutoscalerBehaviorScaledownArgs {
            /**
             * policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
             */
            policies?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAutoscalerBehaviorScaledownPoliciesArgs>[]>;
            /**
             * selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
             */
            selectPolicy?: pulumi.Input<string>;
            /**
             * StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
             */
            stabilizationWindowSeconds?: pulumi.Input<number>;
        }

        /**
         * HPAScalingPolicy is a single policy which must hold true for a specified past interval.
         */
        export interface OpenTelemetryCollectorSpecAutoscalerBehaviorScaledownPoliciesArgs {
            /**
             * PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
             */
            periodSeconds: pulumi.Input<number>;
            /**
             * Type is used to specify the scaling policy.
             */
            type: pulumi.Input<string>;
            /**
             * Value contains the amount of change which is permitted by the policy. It must be greater than zero
             */
            value: pulumi.Input<number>;
        }

        /**
         * scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of: * increase no more than 4 pods per 60 seconds * double the number of pods per 60 seconds No stabilization is used.
         */
        export interface OpenTelemetryCollectorSpecAutoscalerBehaviorScaleupArgs {
            /**
             * policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
             */
            policies?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecAutoscalerBehaviorScaleupPoliciesArgs>[]>;
            /**
             * selectPolicy is used to specify which policy should be used. If not set, the default value Max is used.
             */
            selectPolicy?: pulumi.Input<string>;
            /**
             * StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
             */
            stabilizationWindowSeconds?: pulumi.Input<number>;
        }

        /**
         * HPAScalingPolicy is a single policy which must hold true for a specified past interval.
         */
        export interface OpenTelemetryCollectorSpecAutoscalerBehaviorScaleupPoliciesArgs {
            /**
             * PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
             */
            periodSeconds: pulumi.Input<number>;
            /**
             * Type is used to specify the scaling policy.
             */
            type: pulumi.Input<string>;
            /**
             * Value contains the amount of change which is permitted by the policy. It must be greater than zero
             */
            value: pulumi.Input<number>;
        }

        /**
         * EnvVar represents an environment variable present in a Container.
         */
        export interface OpenTelemetryCollectorSpecEnvArgs {
            /**
             * Name of the environment variable. Must be a C_IDENTIFIER.
             */
            name: pulumi.Input<string>;
            /**
             * Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
             */
            value?: pulumi.Input<string>;
            /**
             * Source for the environment variable's value. Cannot be used if value is not empty.
             */
            valueFrom?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvValuefromArgs>;
        }

        /**
         * Source for the environment variable's value. Cannot be used if value is not empty.
         */
        export interface OpenTelemetryCollectorSpecEnvValuefromArgs {
            /**
             * Selects a key of a ConfigMap.
             */
            configMapKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvValuefromConfigmapkeyrefArgs>;
            /**
             * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvValuefromFieldrefArgs>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvValuefromResourcefieldrefArgs>;
            /**
             * Selects a key of a secret in the pod's namespace
             */
            secretKeyRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvValuefromSecretkeyrefArgs>;
        }

        /**
         * Selects a key of a ConfigMap.
         */
        export interface OpenTelemetryCollectorSpecEnvValuefromConfigmapkeyrefArgs {
            /**
             * The key to select.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
         */
        export interface OpenTelemetryCollectorSpecEnvValuefromFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
         */
        export interface OpenTelemetryCollectorSpecEnvValuefromResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * Selects a key of a secret in the pod's namespace
         */
        export interface OpenTelemetryCollectorSpecEnvValuefromSecretkeyrefArgs {
            /**
             * The key of the secret to select from.  Must be a valid secret key.
             */
            key: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * EnvFromSource represents the source of a set of ConfigMaps
         */
        export interface OpenTelemetryCollectorSpecEnvfromArgs {
            /**
             * The ConfigMap to select from
             */
            configMapRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvfromConfigmaprefArgs>;
            /**
             * An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
             */
            prefix?: pulumi.Input<string>;
            /**
             * The Secret to select from
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecEnvfromSecretrefArgs>;
        }

        /**
         * The ConfigMap to select from
         */
        export interface OpenTelemetryCollectorSpecEnvfromConfigmaprefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the ConfigMap must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * The Secret to select from
         */
        export interface OpenTelemetryCollectorSpecEnvfromSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * Specify whether the Secret must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Ingress is used to specify how OpenTelemetry Collector is exposed. This functionality is only available if one of the valid modes is set. Valid modes are: deployment, daemonset and statefulset.
         */
        export interface OpenTelemetryCollectorSpecIngressArgs {
            /**
             * Annotations to add to ingress. e.g. 'cert-manager.io/cluster-issuer: "letsencrypt"'
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * Hostname by which the ingress proxy can be reached.
             */
            hostname?: pulumi.Input<string>;
            /**
             * IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource.
             */
            ingressClassName?: pulumi.Input<string>;
            /**
             * Route is an OpenShift specific section that is only considered when type "route" is used.
             */
            route?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecIngressRouteArgs>;
            /**
             * TLS configuration.
             */
            tls?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecIngressTlsArgs>[]>;
            /**
             * Type default value is: "" Supported types are: ingress
             */
            type?: pulumi.Input<string>;
        }

        /**
         * Route is an OpenShift specific section that is only considered when type "route" is used.
         */
        export interface OpenTelemetryCollectorSpecIngressRouteArgs {
            /**
             * Termination indicates termination type. By default "edge" is used.
             */
            termination?: pulumi.Input<string>;
        }

        /**
         * IngressTLS describes the transport layer security associated with an Ingress.
         */
        export interface OpenTelemetryCollectorSpecIngressTlsArgs {
            /**
             * Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
             */
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Actions that the management system should take in response to container lifecycle events. Cannot be updated.
         */
        export interface OpenTelemetryCollectorSpecLifecycleArgs {
            /**
             * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            postStart?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePoststartArgs>;
            /**
             * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
             */
            preStop?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePrestopArgs>;
        }

        /**
         * PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface OpenTelemetryCollectorSpecLifecyclePoststartArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePoststartExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePoststartHttpgetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePoststartTcpsocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface OpenTelemetryCollectorSpecLifecyclePoststartExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface OpenTelemetryCollectorSpecLifecyclePoststartHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePoststartHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface OpenTelemetryCollectorSpecLifecyclePoststartHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface OpenTelemetryCollectorSpecLifecyclePoststartTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
         */
        export interface OpenTelemetryCollectorSpecLifecyclePrestopArgs {
            /**
             * Exec specifies the action to take.
             */
            exec?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePrestopExecArgs>;
            /**
             * HTTPGet specifies the http request to perform.
             */
            httpGet?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePrestopHttpgetArgs>;
            /**
             * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
             */
            tcpSocket?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePrestopTcpsocketArgs>;
        }

        /**
         * Exec specifies the action to take.
         */
        export interface OpenTelemetryCollectorSpecLifecyclePrestopExecArgs {
            /**
             * Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
             */
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * HTTPGet specifies the http request to perform.
         */
        export interface OpenTelemetryCollectorSpecLifecyclePrestopHttpgetArgs {
            /**
             * Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
             */
            host?: pulumi.Input<string>;
            /**
             * Custom headers to set in the request. HTTP allows repeated headers.
             */
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecLifecyclePrestopHttpgetHttpheadersArgs>[]>;
            /**
             * Path to access on the HTTP server.
             */
            path?: pulumi.Input<string>;
            /**
             * Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
            /**
             * Scheme to use for connecting to the host. Defaults to HTTP.
             */
            scheme?: pulumi.Input<string>;
        }

        /**
         * HTTPHeader describes a custom header to be used in HTTP probes
         */
        export interface OpenTelemetryCollectorSpecLifecyclePrestopHttpgetHttpheadersArgs {
            /**
             * The header field name
             */
            name: pulumi.Input<string>;
            /**
             * The header field value
             */
            value: pulumi.Input<string>;
        }

        /**
         * Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified.
         */
        export interface OpenTelemetryCollectorSpecLifecyclePrestopTcpsocketArgs {
            /**
             * Optional: Host name to connect to, defaults to the pod IP.
             */
            host?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
             */
            port: pulumi.Input<number | string>;
        }

        /**
         * Liveness config for the OpenTelemetry Collector except the probe handler which is auto generated from the health extension of the collector. It is only effective when healthcheckextension is configured in the OpenTelemetry Collector pipeline.
         */
        export interface OpenTelemetryCollectorSpecLivenessprobeArgs {
            /**
             * Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
             */
            failureThreshold?: pulumi.Input<number>;
            /**
             * Number of seconds after the container has started before liveness probes are initiated. Defaults to 0 seconds. Minimum value is 0. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            initialDelaySeconds?: pulumi.Input<number>;
            /**
             * How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
             */
            periodSeconds?: pulumi.Input<number>;
            /**
             * Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
             */
            successThreshold?: pulumi.Input<number>;
            /**
             * Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
             */
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
             */
            timeoutSeconds?: pulumi.Input<number>;
        }

        /**
         * PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
         */
        export interface OpenTelemetryCollectorSpecPodsecuritycontextArgs {
            /**
             * A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 
             *  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- 
             *  If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroup?: pulumi.Input<number>;
            /**
             * fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used. Note that this field cannot be set when spec.os.name is windows.
             */
            fsGroupChangePolicy?: pulumi.Input<string>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecPodsecuritycontextSelinuxoptionsArgs>;
            /**
             * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecPodsecuritycontextSeccompprofileArgs>;
            /**
             * A list of groups applied to the first process run in each container, in addition to the container's primary GID, the fsGroup (if specified), and group memberships defined in the container image for the uid of the container process. If unspecified, no additional groups are added to any container. Note that group memberships defined in the container image for the uid of the container process are still effective, even if they are not included in this list. Note that this field cannot be set when spec.os.name is windows.
             */
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            /**
             * Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.
             */
            sysctls?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecPodsecuritycontextSysctlsArgs>[]>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecPodsecuritycontextWindowsoptionsArgs>;
        }

        /**
         * The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface OpenTelemetryCollectorSpecPodsecuritycontextSeccompprofileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface OpenTelemetryCollectorSpecPodsecuritycontextSelinuxoptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * Sysctl defines a kernel parameter to be set
         */
        export interface OpenTelemetryCollectorSpecPodsecuritycontextSysctlsArgs {
            /**
             * Name of a property to set
             */
            name: pulumi.Input<string>;
            /**
             * Value of a property to set
             */
            value: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface OpenTelemetryCollectorSpecPodsecuritycontextWindowsoptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * ServicePort contains information on service's port.
         */
        export interface OpenTelemetryCollectorSpecPortsArgs {
            /**
             * The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and https://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
             */
            appProtocol?: pulumi.Input<string>;
            /**
             * The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
             */
            name?: pulumi.Input<string>;
            /**
             * The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
             */
            nodePort?: pulumi.Input<number>;
            /**
             * The port that will be exposed by this service.
             */
            port: pulumi.Input<number>;
            /**
             * The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
             */
            protocol?: pulumi.Input<string>;
            /**
             * Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
             */
            targetPort?: pulumi.Input<number | string>;
        }
        /**
         * openTelemetryCollectorSpecPortsArgsProvideDefaults sets the appropriate defaults for OpenTelemetryCollectorSpecPortsArgs
         */
        export function openTelemetryCollectorSpecPortsArgsProvideDefaults(val: OpenTelemetryCollectorSpecPortsArgs): OpenTelemetryCollectorSpecPortsArgs {
            return {
                ...val,
                protocol: (val.protocol) ?? "TCP",
            };
        }

        /**
         * Resources to set on the OpenTelemetry Collector pods.
         */
        export interface OpenTelemetryCollectorSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface OpenTelemetryCollectorSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * SecurityContext will be set as the container security context.
         */
        export interface OpenTelemetryCollectorSpecSecuritycontextArgs {
            /**
             * AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
             */
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            /**
             * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
             */
            capabilities?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecSecuritycontextCapabilitiesArgs>;
            /**
             * Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.
             */
            privileged?: pulumi.Input<boolean>;
            /**
             * procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.
             */
            procMount?: pulumi.Input<string>;
            /**
             * Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
             */
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            /**
             * The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsGroup?: pulumi.Input<number>;
            /**
             * Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsNonRoot?: pulumi.Input<boolean>;
            /**
             * The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            runAsUser?: pulumi.Input<number>;
            /**
             * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
             */
            seLinuxOptions?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecSecuritycontextSelinuxoptionsArgs>;
            /**
             * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
             */
            seccompProfile?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecSecuritycontextSeccompprofileArgs>;
            /**
             * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
             */
            windowsOptions?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecSecuritycontextWindowsoptionsArgs>;
        }

        /**
         * The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface OpenTelemetryCollectorSpecSecuritycontextCapabilitiesArgs {
            /**
             * Added capabilities
             */
            add?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Removed capabilities
             */
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface OpenTelemetryCollectorSpecSecuritycontextSeccompprofileArgs {
            /**
             * localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
             */
            localhostProfile?: pulumi.Input<string>;
            /**
             * type indicates which kind of seccomp profile will be applied. Valid options are: 
             *  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
             */
            type: pulumi.Input<string>;
        }

        /**
         * The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.
         */
        export interface OpenTelemetryCollectorSpecSecuritycontextSelinuxoptionsArgs {
            /**
             * Level is SELinux level label that applies to the container.
             */
            level?: pulumi.Input<string>;
            /**
             * Role is a SELinux role label that applies to the container.
             */
            role?: pulumi.Input<string>;
            /**
             * Type is a SELinux type label that applies to the container.
             */
            type?: pulumi.Input<string>;
            /**
             * User is a SELinux user label that applies to the container.
             */
            user?: pulumi.Input<string>;
        }

        /**
         * The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux.
         */
        export interface OpenTelemetryCollectorSpecSecuritycontextWindowsoptionsArgs {
            /**
             * GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
             */
            gmsaCredentialSpec?: pulumi.Input<string>;
            /**
             * GMSACredentialSpecName is the name of the GMSA credential spec to use.
             */
            gmsaCredentialSpecName?: pulumi.Input<string>;
            /**
             * HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.
             */
            hostProcess?: pulumi.Input<boolean>;
            /**
             * The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
             */
            runAsUserName?: pulumi.Input<string>;
        }

        /**
         * TargetAllocator indicates a value which determines whether to spawn a target allocation resource or not.
         */
        export interface OpenTelemetryCollectorSpecTargetallocatorArgs {
            /**
             * AllocationStrategy determines which strategy the target allocator should use for allocation. The current options are least-weighted and consistent-hashing. The default option is least-weighted
             */
            allocationStrategy?: pulumi.Input<string>;
            /**
             * Enabled indicates whether to use a target allocation mechanism for Prometheus targets or not.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * FilterStrategy determines how to filter targets before allocating them among the collectors. The only current option is relabel-config (drops targets based on prom relabel_config). Filtering is disabled by default.
             */
            filterStrategy?: pulumi.Input<string>;
            /**
             * Image indicates the container image to use for the OpenTelemetry TargetAllocator.
             */
            image?: pulumi.Input<string>;
            /**
             * PrometheusCR defines the configuration for the retrieval of PrometheusOperator CRDs ( servicemonitor.monitoring.coreos.com/v1 and podmonitor.monitoring.coreos.com/v1 )  retrieval. All CR instances which the ServiceAccount has access to will be retrieved. This includes other namespaces.
             */
            prometheusCR?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecTargetallocatorPrometheuscrArgs>;
            /**
             * Replicas is the number of pod instances for the underlying TargetAllocator. This should only be set to a value other than 1 if a strategy that allows for high availability is chosen. Currently, the only allocation strategy that can be run in a high availability mode is consistent-hashing.
             */
            replicas?: pulumi.Input<number>;
            /**
             * ServiceAccount indicates the name of an existing service account to use with this instance. When set, the operator will not automatically create a ServiceAccount for the TargetAllocator.
             */
            serviceAccount?: pulumi.Input<string>;
        }

        /**
         * PrometheusCR defines the configuration for the retrieval of PrometheusOperator CRDs ( servicemonitor.monitoring.coreos.com/v1 and podmonitor.monitoring.coreos.com/v1 )  retrieval. All CR instances which the ServiceAccount has access to will be retrieved. This includes other namespaces.
         */
        export interface OpenTelemetryCollectorSpecTargetallocatorPrometheuscrArgs {
            /**
             * Enabled indicates whether to use a PrometheusOperator custom resources as targets or not.
             */
            enabled?: pulumi.Input<boolean>;
            /**
             * PodMonitors to be selected for target discovery. This is a map of {key,value} pairs. Each {key,value} in the map is going to exactly match a label in a PodMonitor's meta labels. The requirements are ANDed.
             */
            podMonitorSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ServiceMonitors to be selected for target discovery. This is a map of {key,value} pairs. Each {key,value} in the map is going to exactly match a label in a ServiceMonitor's meta labels. The requirements are ANDed.
             */
            serviceMonitorSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
         */
        export interface OpenTelemetryCollectorSpecTolerationsArgs {
            /**
             * Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
             */
            effect?: pulumi.Input<string>;
            /**
             * Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
             */
            key?: pulumi.Input<string>;
            /**
             * Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
             */
            operator?: pulumi.Input<string>;
            /**
             * TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
             */
            tolerationSeconds?: pulumi.Input<number>;
            /**
             * Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
             */
            value?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaim is a user's request for and claim to a persistent volume
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesArgs {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesMetadataArgs>;
            /**
             * spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            spec?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecArgs>;
            /**
             * status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            status?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesStatusArgs>;
        }

        /**
         * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecDatasourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecDatasourcerefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecDatasourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecDatasourcerefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesStatusArgs {
            /**
             * accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            allocatedResources?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * capacity represents the actual resources of the underlying volume.
             */
            capacity?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
             */
            conditions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumeclaimtemplatesStatusConditionsArgs>[]>;
            /**
             * phase represents the current phase of PersistentVolumeClaim.
             */
            phase?: pulumi.Input<string>;
            /**
             * resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
             */
            resizeStatus?: pulumi.Input<string>;
        }

        /**
         * PersistentVolumeClaimCondition contails details about state of pvc
         */
        export interface OpenTelemetryCollectorSpecVolumeclaimtemplatesStatusConditionsArgs {
            /**
             * lastProbeTime is the time we probed the condition.
             */
            lastProbeTime?: pulumi.Input<string>;
            /**
             * lastTransitionTime is the time the condition transitioned from one status to another.
             */
            lastTransitionTime?: pulumi.Input<string>;
            /**
             * message is the human-readable message indicating details about last transition.
             */
            message?: pulumi.Input<string>;
            /**
             * reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
             */
            reason?: pulumi.Input<string>;
            status: pulumi.Input<string>;
            /**
             * PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
             */
            type: pulumi.Input<string>;
        }

        /**
         * VolumeMount describes a mounting of a Volume within a container.
         */
        export interface OpenTelemetryCollectorSpecVolumemountsArgs {
            /**
             * Path within the container at which the volume should be mounted.  Must not contain ':'.
             */
            mountPath: pulumi.Input<string>;
            /**
             * mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
             */
            mountPropagation?: pulumi.Input<string>;
            /**
             * This must match the Name of a Volume.
             */
            name: pulumi.Input<string>;
            /**
             * Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
             */
            subPath?: pulumi.Input<string>;
            /**
             * Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
             */
            subPathExpr?: pulumi.Input<string>;
        }

        /**
         * Volume represents a named volume in a pod that may be accessed by any container in the pod.
         */
        export interface OpenTelemetryCollectorSpecVolumesArgs {
            /**
             * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            awsElasticBlockStore?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesAwselasticblockstoreArgs>;
            /**
             * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
             */
            azureDisk?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesAzurediskArgs>;
            /**
             * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
             */
            azureFile?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesAzurefileArgs>;
            /**
             * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
             */
            cephfs?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesCephfsArgs>;
            /**
             * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            cinder?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesCinderArgs>;
            /**
             * configMap represents a configMap that should populate this volume
             */
            configMap?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesConfigmapArgs>;
            /**
             * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
             */
            csi?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesCsiArgs>;
            /**
             * downwardAPI represents downward API about the pod that should populate this volume
             */
            downwardAPI?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesDownwardapiArgs>;
            /**
             * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            emptyDir?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEmptydirArgs>;
            /**
             * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
             *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
             *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
             *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
             *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
             */
            ephemeral?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralArgs>;
            /**
             * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
             */
            fc?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesFcArgs>;
            /**
             * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
             */
            flexVolume?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesFlexvolumeArgs>;
            /**
             * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
             */
            flocker?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesFlockerArgs>;
            /**
             * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            gcePersistentDisk?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesGcepersistentdiskArgs>;
            /**
             * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
             */
            gitRepo?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesGitrepoArgs>;
            /**
             * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
             */
            glusterfs?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesGlusterfsArgs>;
            /**
             * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
             */
            hostPath?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesHostpathArgs>;
            /**
             * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
             */
            iscsi?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesIscsiArgs>;
            /**
             * name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
             */
            name: pulumi.Input<string>;
            /**
             * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            nfs?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesNfsArgs>;
            /**
             * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            persistentVolumeClaim?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesPersistentvolumeclaimArgs>;
            /**
             * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
             */
            photonPersistentDisk?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesPhotonpersistentdiskArgs>;
            /**
             * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
             */
            portworxVolume?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesPortworxvolumeArgs>;
            /**
             * projected items for all in one resources secrets, configmaps, and downward API
             */
            projected?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedArgs>;
            /**
             * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
             */
            quobyte?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesQuobyteArgs>;
            /**
             * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
             */
            rbd?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesRbdArgs>;
            /**
             * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
             */
            scaleIO?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesScaleioArgs>;
            /**
             * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secret?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesSecretArgs>;
            /**
             * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
             */
            storageos?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesStorageosArgs>;
            /**
             * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
             */
            vsphereVolume?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesVspherevolumeArgs>;
        }

        /**
         * awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
         */
        export interface OpenTelemetryCollectorSpecVolumesAwselasticblockstoreArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
             */
            partition?: pulumi.Input<number>;
            /**
             * readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
         */
        export interface OpenTelemetryCollectorSpecVolumesAzurediskArgs {
            /**
             * cachingMode is the Host Caching mode: None, Read Only, Read Write.
             */
            cachingMode?: pulumi.Input<string>;
            /**
             * diskName is the Name of the data disk in the blob storage
             */
            diskName: pulumi.Input<string>;
            /**
             * diskURI is the URI of data disk in the blob storage
             */
            diskURI: pulumi.Input<string>;
            /**
             * fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
             */
            kind?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * azureFile represents an Azure File Service mount on the host and bind mount to the pod.
         */
        export interface OpenTelemetryCollectorSpecVolumesAzurefileArgs {
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretName is the  name of secret that contains Azure Storage Account Name and Key
             */
            secretName: pulumi.Input<string>;
            /**
             * shareName is the azure share Name
             */
            shareName: pulumi.Input<string>;
        }

        /**
         * cephFS represents a Ceph FS mount on the host that shares a pod's lifetime
         */
        export interface OpenTelemetryCollectorSpecVolumesCephfsArgs {
            /**
             * monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
             */
            path?: pulumi.Input<string>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretFile?: pulumi.Input<string>;
            /**
             * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesCephfsSecretrefArgs>;
            /**
             * user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
         */
        export interface OpenTelemetryCollectorSpecVolumesCephfsSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
         */
        export interface OpenTelemetryCollectorSpecVolumesCinderArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesCinderSecretrefArgs>;
            /**
             * volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * secretRef is optional: points to a secret object containing parameters used to connect to OpenStack.
         */
        export interface OpenTelemetryCollectorSpecVolumesCinderSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * configMap represents a configMap that should populate this volume
         */
        export interface OpenTelemetryCollectorSpecVolumesConfigmapArgs {
            /**
             * defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesConfigmapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface OpenTelemetryCollectorSpecVolumesConfigmapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
         */
        export interface OpenTelemetryCollectorSpecVolumesCsiArgs {
            /**
             * driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
             */
            fsType?: pulumi.Input<string>;
            /**
             * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
             */
            nodePublishSecretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesCsiNodepublishsecretrefArgs>;
            /**
             * readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
             */
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
         */
        export interface OpenTelemetryCollectorSpecVolumesCsiNodepublishsecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * downwardAPI represents downward API about the pod that should populate this volume
         */
        export interface OpenTelemetryCollectorSpecVolumesDownwardapiArgs {
            /**
             * Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * Items is a list of downward API volume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesDownwardapiItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface OpenTelemetryCollectorSpecVolumesDownwardapiItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesDownwardapiItemsFieldrefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesDownwardapiItemsResourcefieldrefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface OpenTelemetryCollectorSpecVolumesDownwardapiItemsFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface OpenTelemetryCollectorSpecVolumesDownwardapiItemsResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
         */
        export interface OpenTelemetryCollectorSpecVolumesEmptydirArgs {
            /**
             * medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
             */
            medium?: pulumi.Input<string>;
            /**
             * sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
             */
            sizeLimit?: pulumi.Input<number | string>;
        }

        /**
         * ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed. 
         *  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim). 
         *  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod. 
         *  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information. 
         *  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralArgs {
            /**
             * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
             *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
             *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
             *  Required, must not be nil.
             */
            volumeClaimTemplate?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateArgs>;
        }

        /**
         * Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long). 
         *  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster. 
         *  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created. 
         *  Required, must not be nil.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateArgs {
            /**
             * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
             */
            metadata?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateMetadataArgs>;
            /**
             * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
             */
            spec: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecArgs>;
        }

        /**
         * May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateMetadataArgs {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        /**
         * The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecArgs {
            /**
             * accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
             */
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
             */
            dataSource?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceArgs>;
            /**
             * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            dataSourceRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourcerefArgs>;
            /**
             * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
             */
            resources?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecResourcesArgs>;
            /**
             * selector is a label query over volumes to consider for binding.
             */
            selector?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorArgs>;
            /**
             * storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
             */
            storageClassName?: pulumi.Input<string>;
            /**
             * volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
             */
            volumeMode?: pulumi.Input<string>;
            /**
             * volumeName is the binding reference to the PersistentVolume backing this claim.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef, and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified. If the namespace is specified, then dataSourceRef will not be copied to dataSource.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourceArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
        }

        /**
         * dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the dataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in dataSourceRef, both fields (dataSource and dataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in dataSourceRef, dataSource isn't set to the same value and must be empty. There are three important differences between dataSource and dataSourceRef: * While dataSource only allows two specific types of objects, dataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While dataSource ignores disallowed values (dropping them), dataSourceRef preserves all values, and generates an error if a disallowed value is specified. * While dataSource only allows local objects, dataSourceRef allows objects in any namespaces. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled. (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecDatasourcerefArgs {
            /**
             * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
             */
            apiGroup?: pulumi.Input<string>;
            /**
             * Kind is the type of resource being referenced
             */
            kind: pulumi.Input<string>;
            /**
             * Name is the name of resource being referenced
             */
            name: pulumi.Input<string>;
            /**
             * Namespace is the namespace of resource being referenced Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details. (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
             */
            namespace?: pulumi.Input<string>;
        }

        /**
         * resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecResourcesArgs {
            /**
             * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container. 
             *  This is an alpha field and requires enabling the DynamicResourceAllocation feature gate. 
             *  This field is immutable. It can only be set for containers.
             */
            claims?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecResourcesClaimsArgs>[]>;
            /**
             * Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            /**
             * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
             */
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        /**
         * ResourceClaim references one entry in PodSpec.ResourceClaims.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecResourcesClaimsArgs {
            /**
             * Name must match the name of one entry in pod.spec.resourceClaims of the Pod where this field is used. It makes that resource available inside a container.
             */
            name: pulumi.Input<string>;
        }

        /**
         * selector is a label query over volumes to consider for binding.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorArgs {
            /**
             * matchExpressions is a list of label selector requirements. The requirements are ANDed.
             */
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressionsArgs>[]>;
            /**
             * matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
             */
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        /**
         * A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
         */
        export interface OpenTelemetryCollectorSpecVolumesEphemeralVolumeclaimtemplateSpecSelectorMatchexpressionsArgs {
            /**
             * key is the label key that the selector applies to.
             */
            key: pulumi.Input<string>;
            /**
             * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
             */
            operator: pulumi.Input<string>;
            /**
             * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
             */
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
         */
        export interface OpenTelemetryCollectorSpecVolumesFcArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * lun is Optional: FC target lun number
             */
            lun?: pulumi.Input<number>;
            /**
             * readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * targetWWNs is Optional: FC target worldwide names (WWNs)
             */
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
             */
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        /**
         * flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
         */
        export interface OpenTelemetryCollectorSpecVolumesFlexvolumeArgs {
            /**
             * driver is the name of the driver to use for this volume.
             */
            driver: pulumi.Input<string>;
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
             */
            fsType?: pulumi.Input<string>;
            /**
             * options is Optional: this field holds extra command options if any.
             */
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesFlexvolumeSecretrefArgs>;
        }

        /**
         * secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
         */
        export interface OpenTelemetryCollectorSpecVolumesFlexvolumeSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
         */
        export interface OpenTelemetryCollectorSpecVolumesFlockerArgs {
            /**
             * datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
             */
            datasetName?: pulumi.Input<string>;
            /**
             * datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
             */
            datasetUUID?: pulumi.Input<string>;
        }

        /**
         * gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
         */
        export interface OpenTelemetryCollectorSpecVolumesGcepersistentdiskArgs {
            /**
             * fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            partition?: pulumi.Input<number>;
            /**
             * pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            pdName: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
         */
        export interface OpenTelemetryCollectorSpecVolumesGitrepoArgs {
            /**
             * directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
             */
            directory?: pulumi.Input<string>;
            /**
             * repository is the URL
             */
            repository: pulumi.Input<string>;
            /**
             * revision is the commit hash for the specified revision.
             */
            revision?: pulumi.Input<string>;
        }

        /**
         * glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
         */
        export interface OpenTelemetryCollectorSpecVolumesGlusterfsArgs {
            /**
             * endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            endpoints: pulumi.Input<string>;
            /**
             * path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
         */
        export interface OpenTelemetryCollectorSpecVolumesHostpathArgs {
            /**
             * path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            path: pulumi.Input<string>;
            /**
             * type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
             */
            type?: pulumi.Input<string>;
        }

        /**
         * iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
         */
        export interface OpenTelemetryCollectorSpecVolumesIscsiArgs {
            /**
             * chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
             */
            chapAuthDiscovery?: pulumi.Input<boolean>;
            /**
             * chapAuthSession defines whether support iSCSI Session CHAP authentication
             */
            chapAuthSession?: pulumi.Input<boolean>;
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
             */
            initiatorName?: pulumi.Input<string>;
            /**
             * iqn is the target iSCSI Qualified Name.
             */
            iqn: pulumi.Input<string>;
            /**
             * iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
             */
            iscsiInterface?: pulumi.Input<string>;
            /**
             * lun represents iSCSI Target Lun number.
             */
            lun: pulumi.Input<number>;
            /**
             * portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is the CHAP Secret for iSCSI target and initiator authentication
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesIscsiSecretrefArgs>;
            /**
             * targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
             */
            targetPortal: pulumi.Input<string>;
        }

        /**
         * secretRef is the CHAP Secret for iSCSI target and initiator authentication
         */
        export interface OpenTelemetryCollectorSpecVolumesIscsiSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
         */
        export interface OpenTelemetryCollectorSpecVolumesNfsArgs {
            /**
             * path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            path: pulumi.Input<string>;
            /**
             * readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
             */
            server: pulumi.Input<string>;
        }

        /**
         * persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
         */
        export interface OpenTelemetryCollectorSpecVolumesPersistentvolumeclaimArgs {
            /**
             * claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
             */
            claimName: pulumi.Input<string>;
            /**
             * readOnly Will force the ReadOnly setting in VolumeMounts. Default false.
             */
            readOnly?: pulumi.Input<boolean>;
        }

        /**
         * photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
         */
        export interface OpenTelemetryCollectorSpecVolumesPhotonpersistentdiskArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * pdID is the ID that identifies Photon Controller persistent disk
             */
            pdID: pulumi.Input<string>;
        }

        /**
         * portworxVolume represents a portworx volume attached and mounted on kubelets host machine
         */
        export interface OpenTelemetryCollectorSpecVolumesPortworxvolumeArgs {
            /**
             * fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * volumeID uniquely identifies a Portworx volume
             */
            volumeID: pulumi.Input<string>;
        }

        /**
         * projected items for all in one resources secrets, configmaps, and downward API
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedArgs {
            /**
             * defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * sources is the list of volume projections
             */
            sources?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesArgs>[]>;
        }

        /**
         * Projection that may be projected along with other supported volume types
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesArgs {
            /**
             * configMap information about the configMap data to project
             */
            configMap?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesConfigmapArgs>;
            /**
             * downwardAPI information about the downwardAPI data to project
             */
            downwardAPI?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiArgs>;
            /**
             * secret information about the secret data to project
             */
            secret?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesSecretArgs>;
            /**
             * serviceAccountToken is information about the serviceAccountToken data to project
             */
            serviceAccountToken?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesServiceaccounttokenArgs>;
        }

        /**
         * configMap information about the configMap data to project
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesConfigmapArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesConfigmapItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional specify whether the ConfigMap or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesConfigmapItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * downwardAPI information about the downwardAPI data to project
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiArgs {
            /**
             * Items is a list of DownwardAPIVolume file
             */
            items?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiItemsArgs>[]>;
        }

        /**
         * DownwardAPIVolumeFile represents information to create the file containing the pod field
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiItemsArgs {
            /**
             * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
             */
            fieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiItemsFieldrefArgs>;
            /**
             * Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
             */
            path: pulumi.Input<string>;
            /**
             * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
             */
            resourceFieldRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldrefArgs>;
        }

        /**
         * Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiItemsFieldrefArgs {
            /**
             * Version of the schema the FieldPath is written in terms of, defaults to "v1".
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * Path of the field to select in the specified API version.
             */
            fieldPath: pulumi.Input<string>;
        }

        /**
         * Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesDownwardapiItemsResourcefieldrefArgs {
            /**
             * Container name: required for volumes, optional for env vars
             */
            containerName?: pulumi.Input<string>;
            /**
             * Specifies the output format of the exposed resources, defaults to "1"
             */
            divisor?: pulumi.Input<number | string>;
            /**
             * Required: resource to select
             */
            resource: pulumi.Input<string>;
        }

        /**
         * secret information about the secret data to project
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesSecretArgs {
            /**
             * items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesProjectedSourcesSecretItemsArgs>[]>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
            /**
             * optional field specify whether the Secret or its key must be defined
             */
            optional?: pulumi.Input<boolean>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * serviceAccountToken is information about the serviceAccountToken data to project
         */
        export interface OpenTelemetryCollectorSpecVolumesProjectedSourcesServiceaccounttokenArgs {
            /**
             * audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
             */
            audience?: pulumi.Input<string>;
            /**
             * expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
             */
            expirationSeconds?: pulumi.Input<number>;
            /**
             * path is the path relative to the mount point of the file to project the token into.
             */
            path: pulumi.Input<string>;
        }

        /**
         * quobyte represents a Quobyte mount on the host that shares a pod's lifetime
         */
        export interface OpenTelemetryCollectorSpecVolumesQuobyteArgs {
            /**
             * group to map volume access to Default is no group
             */
            group?: pulumi.Input<string>;
            /**
             * readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
             */
            registry: pulumi.Input<string>;
            /**
             * tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
             */
            tenant?: pulumi.Input<string>;
            /**
             * user to map volume access to Defaults to serivceaccount user
             */
            user?: pulumi.Input<string>;
            /**
             * volume is a string that references an already created Quobyte volume by name.
             */
            volume: pulumi.Input<string>;
        }

        /**
         * rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
         */
        export interface OpenTelemetryCollectorSpecVolumesRbdArgs {
            /**
             * fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
             */
            fsType?: pulumi.Input<string>;
            /**
             * image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            image: pulumi.Input<string>;
            /**
             * keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            keyring?: pulumi.Input<string>;
            /**
             * monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            monitors: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            pool?: pulumi.Input<string>;
            /**
             * readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesRbdSecretrefArgs>;
            /**
             * user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
             */
            user?: pulumi.Input<string>;
        }

        /**
         * secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
         */
        export interface OpenTelemetryCollectorSpecVolumesRbdSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
         */
        export interface OpenTelemetryCollectorSpecVolumesScaleioArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
             */
            fsType?: pulumi.Input<string>;
            /**
             * gateway is the host address of the ScaleIO API Gateway.
             */
            gateway: pulumi.Input<string>;
            /**
             * protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
             */
            protectionDomain?: pulumi.Input<string>;
            /**
             * readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
             */
            secretRef: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesScaleioSecretrefArgs>;
            /**
             * sslEnabled Flag enable/disable SSL communication with Gateway, default false
             */
            sslEnabled?: pulumi.Input<boolean>;
            /**
             * storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
             */
            storageMode?: pulumi.Input<string>;
            /**
             * storagePool is the ScaleIO Storage Pool associated with the protection domain.
             */
            storagePool?: pulumi.Input<string>;
            /**
             * system is the name of the storage system as configured in ScaleIO.
             */
            system: pulumi.Input<string>;
            /**
             * volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.
             */
            volumeName?: pulumi.Input<string>;
        }

        /**
         * secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
         */
        export interface OpenTelemetryCollectorSpecVolumesScaleioSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
         */
        export interface OpenTelemetryCollectorSpecVolumesSecretArgs {
            /**
             * defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            defaultMode?: pulumi.Input<number>;
            /**
             * items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
             */
            items?: pulumi.Input<pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesSecretItemsArgs>[]>;
            /**
             * optional field specify whether the Secret or its keys must be defined
             */
            optional?: pulumi.Input<boolean>;
            /**
             * secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
             */
            secretName?: pulumi.Input<string>;
        }

        /**
         * Maps a string key to a path within a volume.
         */
        export interface OpenTelemetryCollectorSpecVolumesSecretItemsArgs {
            /**
             * key is the key to project.
             */
            key: pulumi.Input<string>;
            /**
             * mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
             */
            mode?: pulumi.Input<number>;
            /**
             * path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
             */
            path: pulumi.Input<string>;
        }

        /**
         * storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
         */
        export interface OpenTelemetryCollectorSpecVolumesStorageosArgs {
            /**
             * fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
             */
            readOnly?: pulumi.Input<boolean>;
            /**
             * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
             */
            secretRef?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorSpecVolumesStorageosSecretrefArgs>;
            /**
             * volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
             */
            volumeName?: pulumi.Input<string>;
            /**
             * volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
             */
            volumeNamespace?: pulumi.Input<string>;
        }

        /**
         * secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
         */
        export interface OpenTelemetryCollectorSpecVolumesStorageosSecretrefArgs {
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
             */
            name?: pulumi.Input<string>;
        }

        /**
         * vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
         */
        export interface OpenTelemetryCollectorSpecVolumesVspherevolumeArgs {
            /**
             * fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
             */
            fsType?: pulumi.Input<string>;
            /**
             * storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
             */
            storagePolicyID?: pulumi.Input<string>;
            /**
             * storagePolicyName is the storage Policy Based Management (SPBM) profile name.
             */
            storagePolicyName?: pulumi.Input<string>;
            /**
             * volumePath is the path that identifies vSphere volume vmdk
             */
            volumePath: pulumi.Input<string>;
        }

        /**
         * OpenTelemetryCollectorStatus defines the observed state of OpenTelemetryCollector.
         */
        export interface OpenTelemetryCollectorStatusArgs {
            /**
             * Messages about actions performed by the operator on this resource. Deprecated: use Kubernetes events instead.
             */
            messages?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * Replicas is currently not being set and might be removed in the next version. Deprecated: use "OpenTelemetryCollector.Status.Scale.Replicas" instead.
             */
            replicas?: pulumi.Input<number>;
            /**
             * Scale is the OpenTelemetryCollector's scale subresource status.
             */
            scale?: pulumi.Input<inputs.opentelemetry.v1alpha1.OpenTelemetryCollectorStatusScaleArgs>;
            /**
             * Version of the managed OpenTelemetry Collector (operand)
             */
            version?: pulumi.Input<string>;
        }

        /**
         * Scale is the OpenTelemetryCollector's scale subresource status.
         */
        export interface OpenTelemetryCollectorStatusScaleArgs {
            /**
             * The total number non-terminated pods targeted by this OpenTelemetryCollector's deployment or statefulSet.
             */
            replicas?: pulumi.Input<number>;
            /**
             * The selector used to match the OpenTelemetryCollector's deployment or statefulSet pods.
             */
            selector?: pulumi.Input<string>;
        }
    }
}

export namespace upgrade {
    export namespace v1 {
        export interface PlanSpecArgs {
            channel?: pulumi.Input<string>;
            concurrency?: pulumi.Input<number>;
            cordon?: pulumi.Input<boolean>;
            drain?: pulumi.Input<inputs.upgrade.v1.PlanSpecDrainArgs>;
            nodeSelector?: pulumi.Input<inputs.upgrade.v1.PlanSpecNodeselectorArgs>;
            prepare?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareArgs>;
            secrets?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecSecretsArgs>[]>;
            serviceAccountName?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecTolerationsArgs>[]>;
            upgrade: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeArgs>;
            version?: pulumi.Input<string>;
        }

        export interface PlanSpecDrainArgs {
            deleteLocalData?: pulumi.Input<boolean>;
            disableEviction?: pulumi.Input<boolean>;
            force?: pulumi.Input<boolean>;
            gracePeriod?: pulumi.Input<number>;
            ignoreDaemonSets?: pulumi.Input<boolean>;
            skipWaitForDeleteTimeout?: pulumi.Input<number>;
            timeout?: pulumi.Input<number>;
        }

        export interface PlanSpecNodeselectorArgs {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecNodeselectorMatchexpressionsArgs>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface PlanSpecNodeselectorMatchexpressionsArgs {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface PlanSpecPrepareArgs {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvfromArgs>[]>;
            envs?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvsArgs>[]>;
            image?: pulumi.Input<string>;
            volumes?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareVolumesArgs>[]>;
        }

        export interface PlanSpecPrepareEnvfromArgs {
            configMapRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvfromConfigmaprefArgs>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvfromSecretrefArgs>;
        }

        export interface PlanSpecPrepareEnvfromConfigmaprefArgs {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecPrepareEnvfromSecretrefArgs {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecPrepareEnvsArgs {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvsValuefromArgs>;
        }

        export interface PlanSpecPrepareEnvsValuefromArgs {
            configMapKeyRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvsValuefromConfigmapkeyrefArgs>;
            fieldRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvsValuefromFieldrefArgs>;
            resourceFieldRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvsValuefromResourcefieldrefArgs>;
            secretKeyRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecPrepareEnvsValuefromSecretkeyrefArgs>;
        }

        export interface PlanSpecPrepareEnvsValuefromConfigmapkeyrefArgs {
            key?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecPrepareEnvsValuefromFieldrefArgs {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface PlanSpecPrepareEnvsValuefromResourcefieldrefArgs {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<string>;
            resource?: pulumi.Input<string>;
        }

        export interface PlanSpecPrepareEnvsValuefromSecretkeyrefArgs {
            key?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecPrepareVolumesArgs {
            destination?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            source?: pulumi.Input<string>;
        }

        export interface PlanSpecSecretsArgs {
            name?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
        }

        export interface PlanSpecTolerationsArgs {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface PlanSpecUpgradeArgs {
            args?: pulumi.Input<pulumi.Input<string>[]>;
            command?: pulumi.Input<pulumi.Input<string>[]>;
            envFrom?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvfromArgs>[]>;
            envs?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvsArgs>[]>;
            image?: pulumi.Input<string>;
            volumes?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeVolumesArgs>[]>;
        }

        export interface PlanSpecUpgradeEnvfromArgs {
            configMapRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvfromConfigmaprefArgs>;
            prefix?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvfromSecretrefArgs>;
        }

        export interface PlanSpecUpgradeEnvfromConfigmaprefArgs {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecUpgradeEnvfromSecretrefArgs {
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecUpgradeEnvsArgs {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
            valueFrom?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvsValuefromArgs>;
        }

        export interface PlanSpecUpgradeEnvsValuefromArgs {
            configMapKeyRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvsValuefromConfigmapkeyrefArgs>;
            fieldRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvsValuefromFieldrefArgs>;
            resourceFieldRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvsValuefromResourcefieldrefArgs>;
            secretKeyRef?: pulumi.Input<inputs.upgrade.v1.PlanSpecUpgradeEnvsValuefromSecretkeyrefArgs>;
        }

        export interface PlanSpecUpgradeEnvsValuefromConfigmapkeyrefArgs {
            key?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecUpgradeEnvsValuefromFieldrefArgs {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface PlanSpecUpgradeEnvsValuefromResourcefieldrefArgs {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<string>;
            resource?: pulumi.Input<string>;
        }

        export interface PlanSpecUpgradeEnvsValuefromSecretkeyrefArgs {
            key?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface PlanSpecUpgradeVolumesArgs {
            destination?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            source?: pulumi.Input<string>;
        }

        export interface PlanStatusArgs {
            applying?: pulumi.Input<pulumi.Input<string>[]>;
            conditions?: pulumi.Input<pulumi.Input<inputs.upgrade.v1.PlanStatusConditionsArgs>[]>;
            latestHash?: pulumi.Input<string>;
            latestVersion?: pulumi.Input<string>;
        }

        export interface PlanStatusConditionsArgs {
            lastTransitionTime?: pulumi.Input<string>;
            lastUpdateTime?: pulumi.Input<string>;
            message?: pulumi.Input<string>;
            reason?: pulumi.Input<string>;
            status?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }
    }
}
