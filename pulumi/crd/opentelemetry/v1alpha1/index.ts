// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { InstrumentationArgs } from "./instrumentation";
export type Instrumentation = import("./instrumentation").Instrumentation;
export const Instrumentation: typeof import("./instrumentation").Instrumentation = null as any;
utilities.lazyLoad(exports, ["Instrumentation"], () => require("./instrumentation"));

export { OpenTelemetryCollectorArgs } from "./openTelemetryCollector";
export type OpenTelemetryCollector = import("./openTelemetryCollector").OpenTelemetryCollector;
export const OpenTelemetryCollector: typeof import("./openTelemetryCollector").OpenTelemetryCollector = null as any;
utilities.lazyLoad(exports, ["OpenTelemetryCollector"], () => require("./openTelemetryCollector"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:opentelemetry.io/v1alpha1:Instrumentation":
                return new Instrumentation(name, <any>undefined, { urn })
            case "kubernetes:opentelemetry.io/v1alpha1:OpenTelemetryCollector":
                return new OpenTelemetryCollector(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("crds", "opentelemetry.io/v1alpha1", _module)
