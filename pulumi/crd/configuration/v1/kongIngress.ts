// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

import {ObjectMeta} from "../../meta/v1";

/**
 * KongIngress is the Schema for the kongingresses API.
 */
export class KongIngress extends pulumi.CustomResource {
    /**
     * Get an existing KongIngress resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KongIngress {
        return new KongIngress(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:configuration.konghq.com/v1:KongIngress';

    /**
     * Returns true if the given object is an instance of KongIngress.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KongIngress {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KongIngress.__pulumiType;
    }

    public readonly apiVersion!: pulumi.Output<"configuration.konghq.com/v1" | undefined>;
    public readonly kind!: pulumi.Output<"KongIngress" | undefined>;
    public readonly metadata!: pulumi.Output<ObjectMeta | undefined>;
    /**
     * Proxy defines additional connection options for the routes to be configured in the Kong Gateway, e.g. `connection_timeout`, `retries`, etc.
     */
    public readonly proxy!: pulumi.Output<outputs.configuration.v1.KongIngressProxy | undefined>;
    /**
     * Route define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it.
     */
    public readonly route!: pulumi.Output<outputs.configuration.v1.KongIngressRoute | undefined>;
    /**
     * Upstream represents a virtual hostname and can be used to load balance incoming requests over multiple targets (e.g. Kubernetes Services can be a target, or URLs can be targets).
     */
    public readonly upstream!: pulumi.Output<outputs.configuration.v1.KongIngressUpstream | undefined>;

    /**
     * Create a KongIngress resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KongIngressArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiVersion"] = "configuration.konghq.com/v1";
            resourceInputs["kind"] = "KongIngress";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["route"] = args ? args.route : undefined;
            resourceInputs["upstream"] = args ? args.upstream : undefined;
        } else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["proxy"] = undefined /*out*/;
            resourceInputs["route"] = undefined /*out*/;
            resourceInputs["upstream"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KongIngress.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a KongIngress resource.
 */
export interface KongIngressArgs {
    apiVersion?: pulumi.Input<"configuration.konghq.com/v1">;
    kind?: pulumi.Input<"KongIngress">;
    metadata?: pulumi.Input<ObjectMeta>;
    /**
     * Proxy defines additional connection options for the routes to be configured in the Kong Gateway, e.g. `connection_timeout`, `retries`, etc.
     */
    proxy?: pulumi.Input<inputs.configuration.v1.KongIngressProxyArgs>;
    /**
     * Route define rules to match client requests. Each Route is associated with a Service, and a Service may have multiple Routes associated to it.
     */
    route?: pulumi.Input<inputs.configuration.v1.KongIngressRouteArgs>;
    /**
     * Upstream represents a virtual hostname and can be used to load balance incoming requests over multiple targets (e.g. Kubernetes Services can be a target, or URLs can be targets).
     */
    upstream?: pulumi.Input<inputs.configuration.v1.KongIngressUpstreamArgs>;
}
