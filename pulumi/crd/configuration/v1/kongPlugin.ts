// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

import {ObjectMeta} from "../../meta/v1";

/**
 * KongPlugin is the Schema for the kongplugins API.
 */
export class KongPlugin extends pulumi.CustomResource {
    /**
     * Get an existing KongPlugin resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): KongPlugin {
        return new KongPlugin(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kubernetes:configuration.konghq.com/v1:KongPlugin';

    /**
     * Returns true if the given object is an instance of KongPlugin.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KongPlugin {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KongPlugin.__pulumiType;
    }

    public readonly apiVersion!: pulumi.Output<"configuration.konghq.com/v1" | undefined>;
    /**
     * Config contains the plugin configuration. It's a list of keys and values required to configure the plugin. Please read the documentation of the plugin being configured to set values in here. For any plugin in Kong, anything that goes in the `config` JSON key in the Admin API request, goes into this property. Only one of `config` or `configFrom` may be used in a KongPlugin, not both at once.
     */
    public readonly config!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * ConfigFrom references a secret containing the plugin configuration. This should be used when the plugin configuration contains sensitive information, such as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin. Only one of `config` or `configFrom` may be used in a KongPlugin, not both at once.
     */
    public readonly configFrom!: pulumi.Output<outputs.configuration.v1.KongPluginConfigfrom | undefined>;
    /**
     * ConsumerRef is a reference to a particular consumer.
     */
    public readonly consumerRef!: pulumi.Output<string | undefined>;
    /**
     * Disabled set if the plugin is disabled or not.
     */
    public readonly disabled!: pulumi.Output<boolean | undefined>;
    public readonly kind!: pulumi.Output<"KongPlugin" | undefined>;
    public readonly metadata!: pulumi.Output<ObjectMeta | undefined>;
    /**
     * Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise. `<phase>` is a request processing phase (for example, `access` or `body_filter`) and `<plugin>` is the name of the plugin that will run before or after the KongPlugin. For example, a KongPlugin with `plugin: rate-limiting` and `before.access: ["key-auth"]` will create a rate limiting plugin that limits requests _before_ they are authenticated.
     */
    public readonly ordering!: pulumi.Output<outputs.configuration.v1.KongPluginOrdering | undefined>;
    /**
     * PluginName is the name of the plugin to which to apply the config.
     */
    public readonly plugin!: pulumi.Output<string>;
    /**
     * Protocols configures plugin to run on requests received on specific protocols.
     */
    public readonly protocols!: pulumi.Output<string[] | undefined>;
    /**
     * RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
     */
    public readonly run_on!: pulumi.Output<string | undefined>;

    /**
     * Create a KongPlugin resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KongPluginArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiVersion"] = "configuration.konghq.com/v1";
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["configFrom"] = args ? args.configFrom : undefined;
            resourceInputs["consumerRef"] = args ? args.consumerRef : undefined;
            resourceInputs["disabled"] = args ? args.disabled : undefined;
            resourceInputs["kind"] = "KongPlugin";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["ordering"] = args ? args.ordering : undefined;
            resourceInputs["plugin"] = args ? args.plugin : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["run_on"] = args ? args.run_on : undefined;
        } else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["config"] = undefined /*out*/;
            resourceInputs["configFrom"] = undefined /*out*/;
            resourceInputs["consumerRef"] = undefined /*out*/;
            resourceInputs["disabled"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["ordering"] = undefined /*out*/;
            resourceInputs["plugin"] = undefined /*out*/;
            resourceInputs["protocols"] = undefined /*out*/;
            resourceInputs["run_on"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KongPlugin.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a KongPlugin resource.
 */
export interface KongPluginArgs {
    apiVersion?: pulumi.Input<"configuration.konghq.com/v1">;
    /**
     * Config contains the plugin configuration. It's a list of keys and values required to configure the plugin. Please read the documentation of the plugin being configured to set values in here. For any plugin in Kong, anything that goes in the `config` JSON key in the Admin API request, goes into this property. Only one of `config` or `configFrom` may be used in a KongPlugin, not both at once.
     */
    config?: pulumi.Input<{[key: string]: any}>;
    /**
     * ConfigFrom references a secret containing the plugin configuration. This should be used when the plugin configuration contains sensitive information, such as AWS credentials in the Lambda plugin or the client secret in the OIDC plugin. Only one of `config` or `configFrom` may be used in a KongPlugin, not both at once.
     */
    configFrom?: pulumi.Input<inputs.configuration.v1.KongPluginConfigfromArgs>;
    /**
     * ConsumerRef is a reference to a particular consumer.
     */
    consumerRef?: pulumi.Input<string>;
    /**
     * Disabled set if the plugin is disabled or not.
     */
    disabled?: pulumi.Input<boolean>;
    kind?: pulumi.Input<"KongPlugin">;
    metadata?: pulumi.Input<ObjectMeta>;
    /**
     * Ordering overrides the normal plugin execution order. It's only available on Kong Enterprise. `<phase>` is a request processing phase (for example, `access` or `body_filter`) and `<plugin>` is the name of the plugin that will run before or after the KongPlugin. For example, a KongPlugin with `plugin: rate-limiting` and `before.access: ["key-auth"]` will create a rate limiting plugin that limits requests _before_ they are authenticated.
     */
    ordering?: pulumi.Input<inputs.configuration.v1.KongPluginOrderingArgs>;
    /**
     * PluginName is the name of the plugin to which to apply the config.
     */
    plugin?: pulumi.Input<string>;
    /**
     * Protocols configures plugin to run on requests received on specific protocols.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * RunOn configures the plugin to run on the first or the second or both nodes in case of a service mesh deployment.
     */
    run_on?: pulumi.Input<string>;
}
